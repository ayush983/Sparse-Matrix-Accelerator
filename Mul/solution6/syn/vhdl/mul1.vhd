-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mul1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    B_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_0_ce0 : OUT STD_LOGIC;
    B_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_1_ce0 : OUT STD_LOGIC;
    B_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_2_ce0 : OUT STD_LOGIC;
    B_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_3_ce0 : OUT STD_LOGIC;
    B_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_4_ce0 : OUT STD_LOGIC;
    B_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_5_ce0 : OUT STD_LOGIC;
    B_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_6_ce0 : OUT STD_LOGIC;
    B_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_7_ce0 : OUT STD_LOGIC;
    B_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_0_ce0 : OUT STD_LOGIC;
    C_0_we0 : OUT STD_LOGIC;
    C_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_1_ce0 : OUT STD_LOGIC;
    C_1_we0 : OUT STD_LOGIC;
    C_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_2_ce0 : OUT STD_LOGIC;
    C_2_we0 : OUT STD_LOGIC;
    C_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_3_ce0 : OUT STD_LOGIC;
    C_3_we0 : OUT STD_LOGIC;
    C_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_4_ce0 : OUT STD_LOGIC;
    C_4_we0 : OUT STD_LOGIC;
    C_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_5_ce0 : OUT STD_LOGIC;
    C_5_we0 : OUT STD_LOGIC;
    C_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_6_ce0 : OUT STD_LOGIC;
    C_6_we0 : OUT STD_LOGIC;
    C_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_7_ce0 : OUT STD_LOGIC;
    C_7_we0 : OUT STD_LOGIC;
    C_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sparse_new_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sparse_new_ce0 : OUT STD_LOGIC;
    sparse_new_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sparse_new_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sparse_new_ce1 : OUT STD_LOGIC;
    sparse_new_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mul1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mul1,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=31,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=24,HLS_SYN_FF=586,HLS_SYN_LUT=608,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_fu_310_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_471 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_4_fu_332_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_reg_476 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal C_0_addr_reg_501 : STD_LOGIC_VECTOR (2 downto 0);
    signal C_1_addr_reg_511 : STD_LOGIC_VECTOR (2 downto 0);
    signal C_2_addr_reg_521 : STD_LOGIC_VECTOR (2 downto 0);
    signal C_3_addr_reg_531 : STD_LOGIC_VECTOR (2 downto 0);
    signal C_4_addr_reg_541 : STD_LOGIC_VECTOR (2 downto 0);
    signal C_5_addr_reg_551 : STD_LOGIC_VECTOR (2 downto 0);
    signal C_6_addr_reg_561 : STD_LOGIC_VECTOR (2 downto 0);
    signal C_7_addr_reg_571 : STD_LOGIC_VECTOR (2 downto 0);
    signal val_reg_576 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal B_0_load_reg_588 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_1_load_reg_593 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_2_load_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_3_load_reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_4_load_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_5_load_reg_613 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_6_load_reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_7_load_reg_623 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_388_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_5_1_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_1_reg_633 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_2_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_2_reg_638 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_3_fu_400_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_3_reg_643 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_4_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_4_reg_648 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_5_fu_408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_5_reg_653 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_6_fu_412_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_6_reg_658 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_7_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_7_reg_663 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_293 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_4_cast_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_cast_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_cast_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_320_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_328_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_316_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_343_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_354_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_293 <= i_1_reg_471;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_293 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                B_0_load_reg_588 <= B_0_q0;
                B_1_load_reg_593 <= B_1_q0;
                B_2_load_reg_598 <= B_2_q0;
                B_3_load_reg_603 <= B_3_q0;
                B_4_load_reg_608 <= B_4_q0;
                B_5_load_reg_613 <= B_5_q0;
                B_6_load_reg_618 <= B_6_q0;
                B_7_load_reg_623 <= B_7_q0;
                val_reg_576 <= sparse_new_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                C_0_addr_reg_501 <= tmp_2_fu_376_p1(3 - 1 downto 0);
                C_1_addr_reg_511 <= tmp_2_fu_376_p1(3 - 1 downto 0);
                C_2_addr_reg_521 <= tmp_2_fu_376_p1(3 - 1 downto 0);
                C_3_addr_reg_531 <= tmp_2_fu_376_p1(3 - 1 downto 0);
                C_4_addr_reg_541 <= tmp_2_fu_376_p1(3 - 1 downto 0);
                C_5_addr_reg_551 <= tmp_2_fu_376_p1(3 - 1 downto 0);
                C_6_addr_reg_561 <= tmp_2_fu_376_p1(3 - 1 downto 0);
                C_7_addr_reg_571 <= tmp_2_fu_376_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_471 <= i_1_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_304_p2 = ap_const_lv1_0))) then
                tmp_4_reg_476 <= tmp_4_fu_332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_5_1_reg_633 <= tmp_5_1_fu_392_p2;
                tmp_5_2_reg_638 <= tmp_5_2_fu_396_p2;
                tmp_5_3_reg_643 <= tmp_5_3_fu_400_p2;
                tmp_5_4_reg_648 <= tmp_5_4_fu_404_p2;
                tmp_5_5_reg_653 <= tmp_5_5_fu_408_p2;
                tmp_5_6_reg_658 <= tmp_5_6_fu_412_p2;
                tmp_5_7_reg_663 <= tmp_5_7_fu_416_p2;
                tmp_5_reg_628 <= tmp_5_fu_388_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_304_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_304_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    B_0_address0 <= tmp_1_fu_364_p1(3 - 1 downto 0);

    B_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_0_ce0 <= ap_const_logic_1;
        else 
            B_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_1_address0 <= tmp_1_fu_364_p1(3 - 1 downto 0);

    B_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_1_ce0 <= ap_const_logic_1;
        else 
            B_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_2_address0 <= tmp_1_fu_364_p1(3 - 1 downto 0);

    B_2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_2_ce0 <= ap_const_logic_1;
        else 
            B_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_3_address0 <= tmp_1_fu_364_p1(3 - 1 downto 0);

    B_3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_3_ce0 <= ap_const_logic_1;
        else 
            B_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_4_address0 <= tmp_1_fu_364_p1(3 - 1 downto 0);

    B_4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_4_ce0 <= ap_const_logic_1;
        else 
            B_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_5_address0 <= tmp_1_fu_364_p1(3 - 1 downto 0);

    B_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_5_ce0 <= ap_const_logic_1;
        else 
            B_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_6_address0 <= tmp_1_fu_364_p1(3 - 1 downto 0);

    B_6_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_6_ce0 <= ap_const_logic_1;
        else 
            B_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_7_address0 <= tmp_1_fu_364_p1(3 - 1 downto 0);

    B_7_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_7_ce0 <= ap_const_logic_1;
        else 
            B_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_0_address0 <= C_0_addr_reg_501;

    C_0_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            C_0_ce0 <= ap_const_logic_1;
        else 
            C_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_0_d0 <= std_logic_vector(unsigned(tmp_5_reg_628) + unsigned(C_0_q0));

    C_0_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_0_we0 <= ap_const_logic_1;
        else 
            C_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_1_address0 <= C_1_addr_reg_511;

    C_1_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            C_1_ce0 <= ap_const_logic_1;
        else 
            C_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_1_d0 <= std_logic_vector(unsigned(tmp_5_1_reg_633) + unsigned(C_1_q0));

    C_1_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_1_we0 <= ap_const_logic_1;
        else 
            C_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_2_address0 <= C_2_addr_reg_521;

    C_2_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            C_2_ce0 <= ap_const_logic_1;
        else 
            C_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_2_d0 <= std_logic_vector(unsigned(tmp_5_2_reg_638) + unsigned(C_2_q0));

    C_2_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_2_we0 <= ap_const_logic_1;
        else 
            C_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_3_address0 <= C_3_addr_reg_531;

    C_3_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            C_3_ce0 <= ap_const_logic_1;
        else 
            C_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_3_d0 <= std_logic_vector(unsigned(tmp_5_3_reg_643) + unsigned(C_3_q0));

    C_3_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_3_we0 <= ap_const_logic_1;
        else 
            C_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_4_address0 <= C_4_addr_reg_541;

    C_4_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            C_4_ce0 <= ap_const_logic_1;
        else 
            C_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_4_d0 <= std_logic_vector(unsigned(tmp_5_4_reg_648) + unsigned(C_4_q0));

    C_4_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_4_we0 <= ap_const_logic_1;
        else 
            C_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_5_address0 <= C_5_addr_reg_551;

    C_5_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            C_5_ce0 <= ap_const_logic_1;
        else 
            C_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_5_d0 <= std_logic_vector(unsigned(tmp_5_5_reg_653) + unsigned(C_5_q0));

    C_5_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_5_we0 <= ap_const_logic_1;
        else 
            C_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_6_address0 <= C_6_addr_reg_561;

    C_6_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            C_6_ce0 <= ap_const_logic_1;
        else 
            C_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_6_d0 <= std_logic_vector(unsigned(tmp_5_6_reg_658) + unsigned(C_6_q0));

    C_6_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_6_we0 <= ap_const_logic_1;
        else 
            C_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_7_address0 <= C_7_addr_reg_571;

    C_7_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            C_7_ce0 <= ap_const_logic_1;
        else 
            C_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_7_d0 <= std_logic_vector(unsigned(tmp_5_7_reg_663) + unsigned(C_7_q0));

    C_7_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_7_we0 <= ap_const_logic_1;
        else 
            C_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_304_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_304_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_304_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_304_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_304_p2 <= "1" when (i_reg_293 = ap_const_lv3_6) else "0";
    i_1_fu_310_p2 <= std_logic_vector(unsigned(i_reg_293) + unsigned(ap_const_lv3_1));
    p_shl_cast_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_320_p3),6));

    sparse_new_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_4_cast_fu_338_p1, tmp_8_cast_fu_359_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sparse_new_address0 <= tmp_8_cast_fu_359_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sparse_new_address0 <= tmp_4_cast_fu_338_p1(5 - 1 downto 0);
        else 
            sparse_new_address0 <= "XXXXX";
        end if; 
    end process;

    sparse_new_address1 <= tmp_7_cast_fu_349_p1(5 - 1 downto 0);

    sparse_new_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sparse_new_ce0 <= ap_const_logic_1;
        else 
            sparse_new_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sparse_new_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sparse_new_ce1 <= ap_const_logic_1;
        else 
            sparse_new_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        tmp_1_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sparse_new_q1),64));

        tmp_2_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sparse_new_q0),64));

    tmp_3_fu_320_p3 <= (i_reg_293 & ap_const_lv2_0);
        tmp_4_cast_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_332_p2),64));

    tmp_4_fu_332_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_328_p1) - unsigned(tmp_cast_fu_316_p1));
    tmp_5_1_fu_392_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(B_1_load_reg_593) * signed(val_reg_576))), 32));
    tmp_5_2_fu_396_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(B_2_load_reg_598) * signed(val_reg_576))), 32));
    tmp_5_3_fu_400_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(B_3_load_reg_603) * signed(val_reg_576))), 32));
    tmp_5_4_fu_404_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(B_4_load_reg_608) * signed(val_reg_576))), 32));
    tmp_5_5_fu_408_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(B_5_load_reg_613) * signed(val_reg_576))), 32));
    tmp_5_6_fu_412_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(B_6_load_reg_618) * signed(val_reg_576))), 32));
    tmp_5_7_fu_416_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(B_7_load_reg_623) * signed(val_reg_576))), 32));
    tmp_5_fu_388_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(B_0_load_reg_588) * signed(val_reg_576))), 32));
        tmp_7_cast_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_343_p2),64));

    tmp_7_fu_343_p2 <= std_logic_vector(signed(tmp_4_fu_332_p2) + signed(ap_const_lv6_1));
        tmp_8_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_354_p2),64));

    tmp_8_fu_354_p2 <= std_logic_vector(signed(tmp_4_reg_476) + signed(ap_const_lv6_2));
    tmp_cast_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_293),6));
end behav;

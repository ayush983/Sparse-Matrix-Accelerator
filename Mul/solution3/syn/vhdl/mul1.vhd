-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mul1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_we0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_we1 : OUT STD_LOGIC;
    A_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sparse_new_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sparse_new_ce0 : OUT STD_LOGIC;
    sparse_new_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sparse_new_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sparse_new_ce1 : OUT STD_LOGIC;
    sparse_new_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mul1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mul1,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=217,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=177,HLS_SYN_LUT=257,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_fu_130_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_254 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_2_fu_152_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_reg_259 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_4_fu_183_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_reg_280 : STD_LOGIC_VECTOR (4 downto 0);
    signal val_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_9_cast_fu_191_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_cast_reg_290 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_cast_fu_199_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_cast_reg_295 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_fu_212_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_303 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_addr_reg_313 : STD_LOGIC_VECTOR (5 downto 0);
    signal B_load_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_5_fu_242_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_323 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal C_load_reg_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_102 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_113 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_2_cast_fu_158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_cast_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_cast_fu_178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_cast_fu_227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_cast_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_140_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_148_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_136_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_163_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_173_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_187_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_cast_fu_218_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_222_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_232_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_206_p2 = ap_const_lv1_1))) then 
                i_reg_102 <= i_1_reg_254;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_102 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_reg_113 <= j_1_reg_303;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_113 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                B_load_reg_318 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                C_addr_reg_313 <= tmp_13_cast_fu_237_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                C_load_reg_328 <= C_q0;
                tmp_5_reg_323 <= tmp_5_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_254 <= i_1_fu_130_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_1_reg_303 <= j_1_fu_212_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    tmp_11_cast_reg_295(7 downto 3) <= tmp_11_cast_fu_199_p3(7 downto 3);
                    tmp_9_cast_reg_290(7 downto 3) <= tmp_9_cast_fu_191_p3(7 downto 3);
                val_reg_285 <= sparse_new_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_124_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_2_reg_259 <= tmp_2_fu_152_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_4_reg_280 <= tmp_4_fu_183_p1;
            end if;
        end if;
    end process;
    tmp_9_cast_reg_290(2 downto 0) <= "000";
    tmp_11_cast_reg_295(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_124_p2, ap_CS_fsm_state5, exitcond_fu_206_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_206_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    A_address0 <= ap_const_lv6_0;
    A_address1 <= ap_const_lv6_0;
    A_ce0 <= ap_const_logic_0;
    A_ce1 <= ap_const_logic_0;
    A_d0 <= ap_const_lv32_0;
    A_d1 <= ap_const_lv32_0;
    A_we0 <= ap_const_logic_0;
    A_we1 <= ap_const_logic_0;
    B_address0 <= tmp_12_cast_fu_227_p1(6 - 1 downto 0);

    B_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_address0 <= C_addr_reg_313;

    C_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= std_logic_vector(unsigned(tmp_5_reg_323) + unsigned(C_load_reg_328));

    C_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_124_p2)
    begin
        if (((exitcond1_fu_124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_124_p2)
    begin
        if (((exitcond1_fu_124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_124_p2 <= "1" when (i_reg_102 = ap_const_lv3_6) else "0";
    exitcond_fu_206_p2 <= "1" when (j_reg_113 = ap_const_lv4_8) else "0";
    i_1_fu_130_p2 <= std_logic_vector(unsigned(i_reg_102) + unsigned(ap_const_lv3_1));
    j_1_fu_212_p2 <= std_logic_vector(unsigned(j_reg_113) + unsigned(ap_const_lv4_1));
    p_shl_cast_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_140_p3),6));

    sparse_new_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_2_cast_fu_158_p1, tmp_3_cast_fu_168_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sparse_new_address0 <= tmp_3_cast_fu_168_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sparse_new_address0 <= tmp_2_cast_fu_158_p1(5 - 1 downto 0);
        else 
            sparse_new_address0 <= "XXXXX";
        end if; 
    end process;

    sparse_new_address1 <= tmp_7_cast_fu_178_p1(5 - 1 downto 0);

    sparse_new_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sparse_new_ce0 <= ap_const_logic_1;
        else 
            sparse_new_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sparse_new_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sparse_new_ce1 <= ap_const_logic_1;
        else 
            sparse_new_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_cast_fu_199_p3 <= (tmp_4_reg_280 & ap_const_lv3_0);
        tmp_12_cast_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_222_p2),64));

        tmp_13_cast_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_232_p2),64));

    tmp_1_fu_140_p3 <= (i_reg_102 & ap_const_lv2_0);
        tmp_2_cast_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_152_p2),64));

    tmp_2_fu_152_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_148_p1) - unsigned(tmp_cast_fu_136_p1));
        tmp_3_cast_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_163_p2),64));

    tmp_3_fu_163_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(tmp_2_reg_259));
    tmp_4_cast_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_113),8));
    tmp_4_fu_183_p1 <= sparse_new_q0(5 - 1 downto 0);
    tmp_5_fu_242_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(B_load_reg_318) * signed(val_reg_285))), 32));
        tmp_7_cast_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_173_p2),64));

    tmp_7_fu_173_p2 <= std_logic_vector(unsigned(ap_const_lv6_2) + unsigned(tmp_2_reg_259));
    tmp_8_fu_232_p2 <= std_logic_vector(unsigned(tmp_11_cast_reg_295) + unsigned(tmp_4_cast_fu_218_p1));
    tmp_9_cast_fu_191_p3 <= (tmp_fu_187_p1 & ap_const_lv3_0);
    tmp_cast_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_102),6));
    tmp_fu_187_p1 <= sparse_new_q0(5 - 1 downto 0);
    tmp_s_fu_222_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_290) + unsigned(tmp_4_cast_fu_218_p1));
end behav;

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mul1,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=55,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=472,HLS_SYN_LUT=720,HLS_VERSION=2018_2}" *)

module mul1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_q0,
        A_address1,
        A_ce1,
        A_we1,
        A_d1,
        A_q1,
        B_address0,
        B_ce0,
        B_q0,
        B_address1,
        B_ce1,
        B_q1,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        C_address1,
        C_ce1,
        C_we1,
        C_d1,
        C_q1,
        sparse_new_address0,
        sparse_new_ce0,
        sparse_new_q0,
        sparse_new_address1,
        sparse_new_ce1,
        sparse_new_q1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] A_address0;
output   A_ce0;
output   A_we0;
output  [31:0] A_d0;
input  [31:0] A_q0;
output  [5:0] A_address1;
output   A_ce1;
output   A_we1;
output  [31:0] A_d1;
input  [31:0] A_q1;
output  [5:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [5:0] B_address1;
output   B_ce1;
input  [31:0] B_q1;
output  [5:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
output  [5:0] C_address1;
output   C_ce1;
output   C_we1;
output  [31:0] C_d1;
input  [31:0] C_q1;
output  [4:0] sparse_new_address0;
output   sparse_new_ce0;
input  [31:0] sparse_new_q0;
output  [4:0] sparse_new_address1;
output   sparse_new_ce1;
input  [31:0] sparse_new_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] B_address0;
reg B_ce0;
reg[5:0] B_address1;
reg B_ce1;
reg[5:0] C_address0;
reg C_ce0;
reg C_we0;
reg[31:0] C_d0;
reg[5:0] C_address1;
reg C_ce1;
reg C_we1;
reg[31:0] C_d1;
reg[4:0] sparse_new_address0;
reg sparse_new_ce0;
reg sparse_new_ce1;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [31:0] reg_242;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg   [31:0] reg_246;
reg  signed [31:0] reg_250;
reg   [31:0] reg_254;
reg   [31:0] reg_258;
reg   [31:0] reg_262;
wire   [31:0] grp_fu_266_p2;
reg   [31:0] reg_276;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_271_p2;
reg   [31:0] reg_280;
wire   [31:0] grp_fu_284_p2;
reg   [31:0] reg_308;
wire   [31:0] grp_fu_290_p2;
reg   [31:0] reg_313;
wire   [31:0] grp_fu_296_p2;
reg   [31:0] reg_318;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_302_p2;
reg   [31:0] reg_323;
wire   [2:0] i_1_fu_334_p2;
reg   [2:0] i_1_reg_583;
wire    ap_CS_fsm_state2;
wire  signed [5:0] tmp_2_fu_356_p2;
reg  signed [5:0] tmp_2_reg_588;
wire   [0:0] exitcond1_fu_328_p2;
wire    ap_CS_fsm_state3;
wire   [7:0] tmp_8_cast_fu_405_p3;
reg   [7:0] tmp_8_cast_reg_608;
wire   [7:0] tmp_17_cast_fu_441_p3;
reg   [7:0] tmp_17_cast_reg_628;
reg   [5:0] C_addr_reg_638;
reg   [5:0] C_addr_1_reg_643;
reg  signed [31:0] val_reg_648;
reg   [5:0] C_addr_2_reg_664;
reg   [5:0] C_addr_3_reg_669;
reg   [5:0] C_addr_4_reg_684;
reg   [5:0] C_addr_5_reg_689;
reg   [5:0] C_addr_6_reg_704;
reg   [5:0] C_addr_7_reg_709;
reg   [2:0] i_reg_231;
wire    ap_CS_fsm_state10;
wire  signed [63:0] tmp_2_cast_fu_362_p1;
wire  signed [63:0] tmp_3_cast_fu_373_p1;
wire  signed [63:0] tmp_4_cast_fu_383_p1;
wire  signed [63:0] tmp_8_fu_396_p1;
wire   [63:0] tmp_9_cast_fu_419_p1;
wire  signed [63:0] tmp_16_fu_432_p1;
wire   [63:0] tmp_18_cast_fu_455_p1;
wire  signed [63:0] tmp_10_cast_fu_465_p1;
wire  signed [63:0] tmp_11_cast_fu_475_p1;
wire  signed [63:0] tmp_19_cast_fu_485_p1;
wire  signed [63:0] tmp_20_cast_fu_495_p1;
wire  signed [63:0] tmp_12_cast_fu_505_p1;
wire  signed [63:0] tmp_13_cast_fu_515_p1;
wire  signed [63:0] tmp_21_cast_fu_525_p1;
wire  signed [63:0] tmp_22_cast_fu_535_p1;
wire  signed [63:0] tmp_14_cast_fu_545_p1;
wire  signed [63:0] tmp_15_cast_fu_555_p1;
wire  signed [63:0] tmp_23_cast_fu_565_p1;
wire  signed [63:0] tmp_24_cast_fu_575_p1;
wire   [4:0] tmp_1_fu_344_p3;
wire   [5:0] p_shl_cast_fu_352_p1;
wire   [5:0] tmp_cast_fu_340_p1;
wire   [5:0] tmp_3_fu_367_p2;
wire   [5:0] tmp_4_fu_378_p2;
wire   [34:0] tmp_7_fu_388_p3;
wire   [4:0] tmp_fu_401_p1;
wire   [7:0] tmp_9_fu_413_p2;
wire   [34:0] tmp_15_fu_424_p3;
wire   [4:0] tmp_17_fu_437_p1;
wire   [7:0] tmp_18_fu_449_p2;
wire   [7:0] tmp_s_fu_460_p2;
wire   [7:0] tmp_10_fu_470_p2;
wire   [7:0] tmp_19_fu_480_p2;
wire   [7:0] tmp_20_fu_490_p2;
wire   [7:0] tmp_11_fu_500_p2;
wire   [7:0] tmp_12_fu_510_p2;
wire   [7:0] tmp_21_fu_520_p2;
wire   [7:0] tmp_22_fu_530_p2;
wire   [7:0] tmp_13_fu_540_p2;
wire   [7:0] tmp_14_fu_550_p2;
wire   [7:0] tmp_23_fu_560_p2;
wire   [7:0] tmp_24_fu_570_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_reg_231 <= i_1_reg_583;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_231 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        C_addr_1_reg_643[5 : 3] <= tmp_18_cast_fu_455_p1[5 : 3];
        C_addr_reg_638[5 : 3] <= tmp_16_fu_432_p1[5 : 3];
        tmp_17_cast_reg_628[7 : 3] <= tmp_17_cast_fu_441_p3[7 : 3];
        tmp_8_cast_reg_608[7 : 3] <= tmp_8_cast_fu_405_p3[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        C_addr_2_reg_664[5 : 3] <= tmp_19_cast_fu_485_p1[5 : 3];
        C_addr_3_reg_669[5 : 3] <= tmp_20_cast_fu_495_p1[5 : 3];
        val_reg_648 <= sparse_new_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        C_addr_4_reg_684[5 : 3] <= tmp_21_cast_fu_525_p1[5 : 3];
        C_addr_5_reg_689[5 : 3] <= tmp_22_cast_fu_535_p1[5 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_addr_6_reg_704[5 : 3] <= tmp_23_cast_fu_565_p1[5 : 3];
        C_addr_7_reg_709[5 : 3] <= tmp_24_cast_fu_575_p1[5 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_583 <= i_1_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_242 <= B_q0;
        reg_250 <= B_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_246 <= C_q0;
        reg_254 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_258 <= C_q0;
        reg_262 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_276 <= grp_fu_266_p2;
        reg_280 <= grp_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_308 <= grp_fu_284_p2;
        reg_313 <= grp_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_318 <= grp_fu_296_p2;
        reg_323 <= grp_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_328_p2 == 1'd0))) begin
        tmp_2_reg_588 <= tmp_2_fu_356_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        B_address0 = tmp_14_cast_fu_545_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        B_address0 = tmp_12_cast_fu_505_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_address0 = tmp_10_cast_fu_465_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        B_address0 = tmp_8_fu_396_p1;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        B_address1 = tmp_15_cast_fu_555_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        B_address1 = tmp_13_cast_fu_515_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_address1 = tmp_11_cast_fu_475_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        B_address1 = tmp_9_cast_fu_419_p1;
    end else begin
        B_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        B_ce1 = 1'b1;
    end else begin
        B_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_address0 = C_addr_6_reg_704;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        C_address0 = C_addr_4_reg_684;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_address0 = C_addr_2_reg_664;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        C_address0 = C_addr_reg_638;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        C_address0 = tmp_23_cast_fu_565_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        C_address0 = tmp_21_cast_fu_525_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        C_address0 = tmp_19_cast_fu_485_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        C_address0 = tmp_16_fu_432_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_address1 = C_addr_7_reg_709;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        C_address1 = C_addr_5_reg_689;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_address1 = C_addr_3_reg_669;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        C_address1 = C_addr_1_reg_643;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        C_address1 = tmp_24_cast_fu_575_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        C_address1 = tmp_22_cast_fu_535_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        C_address1 = tmp_20_cast_fu_495_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        C_address1 = tmp_18_cast_fu_455_p1;
    end else begin
        C_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        C_ce1 = 1'b1;
    end else begin
        C_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        C_d0 = reg_318;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9))) begin
        C_d0 = reg_308;
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        C_d1 = reg_323;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9))) begin
        C_d1 = reg_313;
    end else begin
        C_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        C_we1 = 1'b1;
    end else begin
        C_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_328_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_328_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sparse_new_address0 = tmp_4_cast_fu_383_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sparse_new_address0 = tmp_2_cast_fu_362_p1;
    end else begin
        sparse_new_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        sparse_new_ce0 = 1'b1;
    end else begin
        sparse_new_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sparse_new_ce1 = 1'b1;
    end else begin
        sparse_new_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_328_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = 6'd0;

assign A_address1 = 6'd0;

assign A_ce0 = 1'b0;

assign A_ce1 = 1'b0;

assign A_d0 = 32'd0;

assign A_d1 = 32'd0;

assign A_we0 = 1'b0;

assign A_we1 = 1'b0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_328_p2 = ((i_reg_231 == 3'd6) ? 1'b1 : 1'b0);

assign grp_fu_266_p2 = ($signed(val_reg_648) * $signed(reg_242));

assign grp_fu_271_p2 = ($signed(val_reg_648) * $signed(reg_250));

assign grp_fu_284_p2 = (reg_246 + reg_276);

assign grp_fu_290_p2 = (reg_254 + reg_280);

assign grp_fu_296_p2 = (reg_258 + reg_276);

assign grp_fu_302_p2 = (reg_262 + reg_280);

assign i_1_fu_334_p2 = (i_reg_231 + 3'd1);

assign p_shl_cast_fu_352_p1 = tmp_1_fu_344_p3;

assign sparse_new_address1 = tmp_3_cast_fu_373_p1;

assign tmp_10_cast_fu_465_p1 = $signed(tmp_s_fu_460_p2);

assign tmp_10_fu_470_p2 = (tmp_8_cast_reg_608 | 8'd3);

assign tmp_11_cast_fu_475_p1 = $signed(tmp_10_fu_470_p2);

assign tmp_11_fu_500_p2 = (tmp_8_cast_reg_608 | 8'd4);

assign tmp_12_cast_fu_505_p1 = $signed(tmp_11_fu_500_p2);

assign tmp_12_fu_510_p2 = (tmp_8_cast_reg_608 | 8'd5);

assign tmp_13_cast_fu_515_p1 = $signed(tmp_12_fu_510_p2);

assign tmp_13_fu_540_p2 = (tmp_8_cast_reg_608 | 8'd6);

assign tmp_14_cast_fu_545_p1 = $signed(tmp_13_fu_540_p2);

assign tmp_14_fu_550_p2 = (tmp_8_cast_reg_608 | 8'd7);

assign tmp_15_cast_fu_555_p1 = $signed(tmp_14_fu_550_p2);

assign tmp_15_fu_424_p3 = {{sparse_new_q0}, {3'd0}};

assign tmp_16_fu_432_p1 = $signed(tmp_15_fu_424_p3);

assign tmp_17_cast_fu_441_p3 = {{tmp_17_fu_437_p1}, {3'd0}};

assign tmp_17_fu_437_p1 = sparse_new_q0[4:0];

assign tmp_18_cast_fu_455_p1 = tmp_18_fu_449_p2;

assign tmp_18_fu_449_p2 = (tmp_17_cast_fu_441_p3 | 8'd1);

assign tmp_19_cast_fu_485_p1 = $signed(tmp_19_fu_480_p2);

assign tmp_19_fu_480_p2 = (tmp_17_cast_reg_628 | 8'd2);

assign tmp_1_fu_344_p3 = {{i_reg_231}, {2'd0}};

assign tmp_20_cast_fu_495_p1 = $signed(tmp_20_fu_490_p2);

assign tmp_20_fu_490_p2 = (tmp_17_cast_reg_628 | 8'd3);

assign tmp_21_cast_fu_525_p1 = $signed(tmp_21_fu_520_p2);

assign tmp_21_fu_520_p2 = (tmp_17_cast_reg_628 | 8'd4);

assign tmp_22_cast_fu_535_p1 = $signed(tmp_22_fu_530_p2);

assign tmp_22_fu_530_p2 = (tmp_17_cast_reg_628 | 8'd5);

assign tmp_23_cast_fu_565_p1 = $signed(tmp_23_fu_560_p2);

assign tmp_23_fu_560_p2 = (tmp_17_cast_reg_628 | 8'd6);

assign tmp_24_cast_fu_575_p1 = $signed(tmp_24_fu_570_p2);

assign tmp_24_fu_570_p2 = (tmp_17_cast_reg_628 | 8'd7);

assign tmp_2_cast_fu_362_p1 = tmp_2_fu_356_p2;

assign tmp_2_fu_356_p2 = (p_shl_cast_fu_352_p1 - tmp_cast_fu_340_p1);

assign tmp_3_cast_fu_373_p1 = $signed(tmp_3_fu_367_p2);

assign tmp_3_fu_367_p2 = ($signed(6'd1) + $signed(tmp_2_fu_356_p2));

assign tmp_4_cast_fu_383_p1 = $signed(tmp_4_fu_378_p2);

assign tmp_4_fu_378_p2 = ($signed(6'd2) + $signed(tmp_2_reg_588));

assign tmp_7_fu_388_p3 = {{sparse_new_q1}, {3'd0}};

assign tmp_8_cast_fu_405_p3 = {{tmp_fu_401_p1}, {3'd0}};

assign tmp_8_fu_396_p1 = $signed(tmp_7_fu_388_p3);

assign tmp_9_cast_fu_419_p1 = tmp_9_fu_413_p2;

assign tmp_9_fu_413_p2 = (tmp_8_cast_fu_405_p3 | 8'd1);

assign tmp_cast_fu_340_p1 = i_reg_231;

assign tmp_fu_401_p1 = sparse_new_q1[4:0];

assign tmp_s_fu_460_p2 = (tmp_8_cast_reg_608 | 8'd2);

always @ (posedge ap_clk) begin
    tmp_8_cast_reg_608[2:0] <= 3'b000;
    tmp_17_cast_reg_628[2:0] <= 3'b000;
    C_addr_reg_638[2:0] <= 3'b000;
    C_addr_1_reg_643[2:0] <= 3'b001;
    C_addr_2_reg_664[2:0] <= 3'b010;
    C_addr_3_reg_669[2:0] <= 3'b011;
    C_addr_4_reg_684[2:0] <= 3'b100;
    C_addr_5_reg_689[2:0] <= 3'b101;
    C_addr_6_reg_704[2:0] <= 3'b110;
    C_addr_7_reg_709[2:0] <= 3'b111;
end

endmodule //mul1

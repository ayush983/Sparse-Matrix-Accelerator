// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mul1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mul1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mul1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> mul1::ap_ST_fsm_state1 = "1";
const sc_lv<10> mul1::ap_ST_fsm_state2 = "10";
const sc_lv<10> mul1::ap_ST_fsm_state3 = "100";
const sc_lv<10> mul1::ap_ST_fsm_state4 = "1000";
const sc_lv<10> mul1::ap_ST_fsm_state5 = "10000";
const sc_lv<10> mul1::ap_ST_fsm_state6 = "100000";
const sc_lv<10> mul1::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> mul1::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> mul1::ap_ST_fsm_state9 = "100000000";
const sc_lv<10> mul1::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> mul1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> mul1::ap_const_lv32_3 = "11";
const sc_lv<32> mul1::ap_const_lv32_4 = "100";
const sc_lv<32> mul1::ap_const_lv32_5 = "101";
const sc_lv<32> mul1::ap_const_lv32_6 = "110";
const sc_lv<32> mul1::ap_const_lv32_7 = "111";
const sc_lv<32> mul1::ap_const_lv32_8 = "1000";
const sc_lv<32> mul1::ap_const_lv32_1 = "1";
const sc_lv<1> mul1::ap_const_lv1_0 = "0";
const sc_lv<32> mul1::ap_const_lv32_2 = "10";
const sc_lv<3> mul1::ap_const_lv3_0 = "000";
const sc_lv<32> mul1::ap_const_lv32_9 = "1001";
const sc_lv<3> mul1::ap_const_lv3_6 = "110";
const sc_lv<3> mul1::ap_const_lv3_1 = "1";
const sc_lv<2> mul1::ap_const_lv2_0 = "00";
const sc_lv<6> mul1::ap_const_lv6_1 = "1";
const sc_lv<6> mul1::ap_const_lv6_2 = "10";
const sc_lv<8> mul1::ap_const_lv8_1 = "1";
const sc_lv<8> mul1::ap_const_lv8_2 = "10";
const sc_lv<8> mul1::ap_const_lv8_3 = "11";
const sc_lv<8> mul1::ap_const_lv8_4 = "100";
const sc_lv<8> mul1::ap_const_lv8_5 = "101";
const sc_lv<8> mul1::ap_const_lv8_6 = "110";
const sc_lv<8> mul1::ap_const_lv8_7 = "111";
const sc_lv<1> mul1::ap_const_lv1_1 = "1";
const sc_lv<6> mul1::ap_const_lv6_0 = "000000";
const bool mul1::ap_const_boolean_1 = true;

mul1::mul1(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_address0);

    SC_METHOD(thread_A_address1);

    SC_METHOD(thread_A_ce0);

    SC_METHOD(thread_A_ce1);

    SC_METHOD(thread_A_d0);

    SC_METHOD(thread_A_d1);

    SC_METHOD(thread_A_we0);

    SC_METHOD(thread_A_we1);

    SC_METHOD(thread_B_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_8_fu_396_p1 );
    sensitive << ( tmp_10_cast_fu_465_p1 );
    sensitive << ( tmp_12_cast_fu_505_p1 );
    sensitive << ( tmp_14_cast_fu_545_p1 );

    SC_METHOD(thread_B_address1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_9_cast_fu_419_p1 );
    sensitive << ( tmp_11_cast_fu_475_p1 );
    sensitive << ( tmp_13_cast_fu_515_p1 );
    sensitive << ( tmp_15_cast_fu_555_p1 );

    SC_METHOD(thread_B_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_B_ce1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_C_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( C_addr_reg_638 );
    sensitive << ( C_addr_2_reg_664 );
    sensitive << ( C_addr_4_reg_684 );
    sensitive << ( C_addr_6_reg_704 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_16_fu_432_p1 );
    sensitive << ( tmp_19_cast_fu_485_p1 );
    sensitive << ( tmp_21_cast_fu_525_p1 );
    sensitive << ( tmp_23_cast_fu_565_p1 );

    SC_METHOD(thread_C_address1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( C_addr_1_reg_643 );
    sensitive << ( C_addr_3_reg_669 );
    sensitive << ( C_addr_5_reg_689 );
    sensitive << ( C_addr_7_reg_709 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_18_cast_fu_455_p1 );
    sensitive << ( tmp_20_cast_fu_495_p1 );
    sensitive << ( tmp_22_cast_fu_535_p1 );
    sensitive << ( tmp_24_cast_fu_575_p1 );

    SC_METHOD(thread_C_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_C_ce1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_C_d0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( reg_308 );
    sensitive << ( reg_318 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_C_d1);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( reg_313 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( reg_323 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_C_we0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_C_we1);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_328_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_328_p2 );

    SC_METHOD(thread_exitcond1_fu_328_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_231 );

    SC_METHOD(thread_grp_fu_266_p2);
    sensitive << ( reg_242 );
    sensitive << ( val_reg_648 );

    SC_METHOD(thread_grp_fu_271_p2);
    sensitive << ( reg_250 );
    sensitive << ( val_reg_648 );

    SC_METHOD(thread_grp_fu_284_p2);
    sensitive << ( reg_246 );
    sensitive << ( reg_276 );

    SC_METHOD(thread_grp_fu_290_p2);
    sensitive << ( reg_254 );
    sensitive << ( reg_280 );

    SC_METHOD(thread_grp_fu_296_p2);
    sensitive << ( reg_258 );
    sensitive << ( reg_276 );

    SC_METHOD(thread_grp_fu_302_p2);
    sensitive << ( reg_262 );
    sensitive << ( reg_280 );

    SC_METHOD(thread_i_1_fu_334_p2);
    sensitive << ( i_reg_231 );

    SC_METHOD(thread_p_shl_cast_fu_352_p1);
    sensitive << ( tmp_1_fu_344_p3 );

    SC_METHOD(thread_sparse_new_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_cast_fu_362_p1 );
    sensitive << ( tmp_4_cast_fu_383_p1 );

    SC_METHOD(thread_sparse_new_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_3_cast_fu_373_p1 );

    SC_METHOD(thread_sparse_new_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sparse_new_ce1);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_10_cast_fu_465_p1);
    sensitive << ( tmp_s_fu_460_p2 );

    SC_METHOD(thread_tmp_10_fu_470_p2);
    sensitive << ( tmp_8_cast_reg_608 );

    SC_METHOD(thread_tmp_11_cast_fu_475_p1);
    sensitive << ( tmp_10_fu_470_p2 );

    SC_METHOD(thread_tmp_11_fu_500_p2);
    sensitive << ( tmp_8_cast_reg_608 );

    SC_METHOD(thread_tmp_12_cast_fu_505_p1);
    sensitive << ( tmp_11_fu_500_p2 );

    SC_METHOD(thread_tmp_12_fu_510_p2);
    sensitive << ( tmp_8_cast_reg_608 );

    SC_METHOD(thread_tmp_13_cast_fu_515_p1);
    sensitive << ( tmp_12_fu_510_p2 );

    SC_METHOD(thread_tmp_13_fu_540_p2);
    sensitive << ( tmp_8_cast_reg_608 );

    SC_METHOD(thread_tmp_14_cast_fu_545_p1);
    sensitive << ( tmp_13_fu_540_p2 );

    SC_METHOD(thread_tmp_14_fu_550_p2);
    sensitive << ( tmp_8_cast_reg_608 );

    SC_METHOD(thread_tmp_15_cast_fu_555_p1);
    sensitive << ( tmp_14_fu_550_p2 );

    SC_METHOD(thread_tmp_15_fu_424_p3);
    sensitive << ( sparse_new_q0 );

    SC_METHOD(thread_tmp_16_fu_432_p1);
    sensitive << ( tmp_15_fu_424_p3 );

    SC_METHOD(thread_tmp_17_cast_fu_441_p3);
    sensitive << ( tmp_17_fu_437_p1 );

    SC_METHOD(thread_tmp_17_fu_437_p1);
    sensitive << ( sparse_new_q0 );

    SC_METHOD(thread_tmp_18_cast_fu_455_p1);
    sensitive << ( tmp_18_fu_449_p2 );

    SC_METHOD(thread_tmp_18_fu_449_p2);
    sensitive << ( tmp_17_cast_fu_441_p3 );

    SC_METHOD(thread_tmp_19_cast_fu_485_p1);
    sensitive << ( tmp_19_fu_480_p2 );

    SC_METHOD(thread_tmp_19_fu_480_p2);
    sensitive << ( tmp_17_cast_reg_628 );

    SC_METHOD(thread_tmp_1_fu_344_p3);
    sensitive << ( i_reg_231 );

    SC_METHOD(thread_tmp_20_cast_fu_495_p1);
    sensitive << ( tmp_20_fu_490_p2 );

    SC_METHOD(thread_tmp_20_fu_490_p2);
    sensitive << ( tmp_17_cast_reg_628 );

    SC_METHOD(thread_tmp_21_cast_fu_525_p1);
    sensitive << ( tmp_21_fu_520_p2 );

    SC_METHOD(thread_tmp_21_fu_520_p2);
    sensitive << ( tmp_17_cast_reg_628 );

    SC_METHOD(thread_tmp_22_cast_fu_535_p1);
    sensitive << ( tmp_22_fu_530_p2 );

    SC_METHOD(thread_tmp_22_fu_530_p2);
    sensitive << ( tmp_17_cast_reg_628 );

    SC_METHOD(thread_tmp_23_cast_fu_565_p1);
    sensitive << ( tmp_23_fu_560_p2 );

    SC_METHOD(thread_tmp_23_fu_560_p2);
    sensitive << ( tmp_17_cast_reg_628 );

    SC_METHOD(thread_tmp_24_cast_fu_575_p1);
    sensitive << ( tmp_24_fu_570_p2 );

    SC_METHOD(thread_tmp_24_fu_570_p2);
    sensitive << ( tmp_17_cast_reg_628 );

    SC_METHOD(thread_tmp_2_cast_fu_362_p1);
    sensitive << ( tmp_2_fu_356_p2 );

    SC_METHOD(thread_tmp_2_fu_356_p2);
    sensitive << ( p_shl_cast_fu_352_p1 );
    sensitive << ( tmp_cast_fu_340_p1 );

    SC_METHOD(thread_tmp_3_cast_fu_373_p1);
    sensitive << ( tmp_3_fu_367_p2 );

    SC_METHOD(thread_tmp_3_fu_367_p2);
    sensitive << ( tmp_2_fu_356_p2 );

    SC_METHOD(thread_tmp_4_cast_fu_383_p1);
    sensitive << ( tmp_4_fu_378_p2 );

    SC_METHOD(thread_tmp_4_fu_378_p2);
    sensitive << ( tmp_2_reg_588 );

    SC_METHOD(thread_tmp_7_fu_388_p3);
    sensitive << ( sparse_new_q1 );

    SC_METHOD(thread_tmp_8_cast_fu_405_p3);
    sensitive << ( tmp_fu_401_p1 );

    SC_METHOD(thread_tmp_8_fu_396_p1);
    sensitive << ( tmp_7_fu_388_p3 );

    SC_METHOD(thread_tmp_9_cast_fu_419_p1);
    sensitive << ( tmp_9_fu_413_p2 );

    SC_METHOD(thread_tmp_9_fu_413_p2);
    sensitive << ( tmp_8_cast_fu_405_p3 );

    SC_METHOD(thread_tmp_cast_fu_340_p1);
    sensitive << ( i_reg_231 );

    SC_METHOD(thread_tmp_fu_401_p1);
    sensitive << ( sparse_new_q1 );

    SC_METHOD(thread_tmp_s_fu_460_p2);
    sensitive << ( tmp_8_cast_reg_608 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_328_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mul1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, A_address0, "(port)A_address0");
    sc_trace(mVcdFile, A_ce0, "(port)A_ce0");
    sc_trace(mVcdFile, A_we0, "(port)A_we0");
    sc_trace(mVcdFile, A_d0, "(port)A_d0");
    sc_trace(mVcdFile, A_q0, "(port)A_q0");
    sc_trace(mVcdFile, A_address1, "(port)A_address1");
    sc_trace(mVcdFile, A_ce1, "(port)A_ce1");
    sc_trace(mVcdFile, A_we1, "(port)A_we1");
    sc_trace(mVcdFile, A_d1, "(port)A_d1");
    sc_trace(mVcdFile, A_q1, "(port)A_q1");
    sc_trace(mVcdFile, B_address0, "(port)B_address0");
    sc_trace(mVcdFile, B_ce0, "(port)B_ce0");
    sc_trace(mVcdFile, B_q0, "(port)B_q0");
    sc_trace(mVcdFile, B_address1, "(port)B_address1");
    sc_trace(mVcdFile, B_ce1, "(port)B_ce1");
    sc_trace(mVcdFile, B_q1, "(port)B_q1");
    sc_trace(mVcdFile, C_address0, "(port)C_address0");
    sc_trace(mVcdFile, C_ce0, "(port)C_ce0");
    sc_trace(mVcdFile, C_we0, "(port)C_we0");
    sc_trace(mVcdFile, C_d0, "(port)C_d0");
    sc_trace(mVcdFile, C_q0, "(port)C_q0");
    sc_trace(mVcdFile, C_address1, "(port)C_address1");
    sc_trace(mVcdFile, C_ce1, "(port)C_ce1");
    sc_trace(mVcdFile, C_we1, "(port)C_we1");
    sc_trace(mVcdFile, C_d1, "(port)C_d1");
    sc_trace(mVcdFile, C_q1, "(port)C_q1");
    sc_trace(mVcdFile, sparse_new_address0, "(port)sparse_new_address0");
    sc_trace(mVcdFile, sparse_new_ce0, "(port)sparse_new_ce0");
    sc_trace(mVcdFile, sparse_new_q0, "(port)sparse_new_q0");
    sc_trace(mVcdFile, sparse_new_address1, "(port)sparse_new_address1");
    sc_trace(mVcdFile, sparse_new_ce1, "(port)sparse_new_ce1");
    sc_trace(mVcdFile, sparse_new_q1, "(port)sparse_new_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_242, "reg_242");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, reg_246, "reg_246");
    sc_trace(mVcdFile, reg_250, "reg_250");
    sc_trace(mVcdFile, reg_254, "reg_254");
    sc_trace(mVcdFile, reg_258, "reg_258");
    sc_trace(mVcdFile, reg_262, "reg_262");
    sc_trace(mVcdFile, grp_fu_266_p2, "grp_fu_266_p2");
    sc_trace(mVcdFile, reg_276, "reg_276");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_271_p2, "grp_fu_271_p2");
    sc_trace(mVcdFile, reg_280, "reg_280");
    sc_trace(mVcdFile, grp_fu_284_p2, "grp_fu_284_p2");
    sc_trace(mVcdFile, reg_308, "reg_308");
    sc_trace(mVcdFile, grp_fu_290_p2, "grp_fu_290_p2");
    sc_trace(mVcdFile, reg_313, "reg_313");
    sc_trace(mVcdFile, grp_fu_296_p2, "grp_fu_296_p2");
    sc_trace(mVcdFile, reg_318, "reg_318");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, grp_fu_302_p2, "grp_fu_302_p2");
    sc_trace(mVcdFile, reg_323, "reg_323");
    sc_trace(mVcdFile, i_1_fu_334_p2, "i_1_fu_334_p2");
    sc_trace(mVcdFile, i_1_reg_583, "i_1_reg_583");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_2_fu_356_p2, "tmp_2_fu_356_p2");
    sc_trace(mVcdFile, tmp_2_reg_588, "tmp_2_reg_588");
    sc_trace(mVcdFile, exitcond1_fu_328_p2, "exitcond1_fu_328_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_8_cast_fu_405_p3, "tmp_8_cast_fu_405_p3");
    sc_trace(mVcdFile, tmp_8_cast_reg_608, "tmp_8_cast_reg_608");
    sc_trace(mVcdFile, tmp_17_cast_fu_441_p3, "tmp_17_cast_fu_441_p3");
    sc_trace(mVcdFile, tmp_17_cast_reg_628, "tmp_17_cast_reg_628");
    sc_trace(mVcdFile, C_addr_reg_638, "C_addr_reg_638");
    sc_trace(mVcdFile, C_addr_1_reg_643, "C_addr_1_reg_643");
    sc_trace(mVcdFile, val_reg_648, "val_reg_648");
    sc_trace(mVcdFile, C_addr_2_reg_664, "C_addr_2_reg_664");
    sc_trace(mVcdFile, C_addr_3_reg_669, "C_addr_3_reg_669");
    sc_trace(mVcdFile, C_addr_4_reg_684, "C_addr_4_reg_684");
    sc_trace(mVcdFile, C_addr_5_reg_689, "C_addr_5_reg_689");
    sc_trace(mVcdFile, C_addr_6_reg_704, "C_addr_6_reg_704");
    sc_trace(mVcdFile, C_addr_7_reg_709, "C_addr_7_reg_709");
    sc_trace(mVcdFile, i_reg_231, "i_reg_231");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, tmp_2_cast_fu_362_p1, "tmp_2_cast_fu_362_p1");
    sc_trace(mVcdFile, tmp_3_cast_fu_373_p1, "tmp_3_cast_fu_373_p1");
    sc_trace(mVcdFile, tmp_4_cast_fu_383_p1, "tmp_4_cast_fu_383_p1");
    sc_trace(mVcdFile, tmp_8_fu_396_p1, "tmp_8_fu_396_p1");
    sc_trace(mVcdFile, tmp_9_cast_fu_419_p1, "tmp_9_cast_fu_419_p1");
    sc_trace(mVcdFile, tmp_16_fu_432_p1, "tmp_16_fu_432_p1");
    sc_trace(mVcdFile, tmp_18_cast_fu_455_p1, "tmp_18_cast_fu_455_p1");
    sc_trace(mVcdFile, tmp_10_cast_fu_465_p1, "tmp_10_cast_fu_465_p1");
    sc_trace(mVcdFile, tmp_11_cast_fu_475_p1, "tmp_11_cast_fu_475_p1");
    sc_trace(mVcdFile, tmp_19_cast_fu_485_p1, "tmp_19_cast_fu_485_p1");
    sc_trace(mVcdFile, tmp_20_cast_fu_495_p1, "tmp_20_cast_fu_495_p1");
    sc_trace(mVcdFile, tmp_12_cast_fu_505_p1, "tmp_12_cast_fu_505_p1");
    sc_trace(mVcdFile, tmp_13_cast_fu_515_p1, "tmp_13_cast_fu_515_p1");
    sc_trace(mVcdFile, tmp_21_cast_fu_525_p1, "tmp_21_cast_fu_525_p1");
    sc_trace(mVcdFile, tmp_22_cast_fu_535_p1, "tmp_22_cast_fu_535_p1");
    sc_trace(mVcdFile, tmp_14_cast_fu_545_p1, "tmp_14_cast_fu_545_p1");
    sc_trace(mVcdFile, tmp_15_cast_fu_555_p1, "tmp_15_cast_fu_555_p1");
    sc_trace(mVcdFile, tmp_23_cast_fu_565_p1, "tmp_23_cast_fu_565_p1");
    sc_trace(mVcdFile, tmp_24_cast_fu_575_p1, "tmp_24_cast_fu_575_p1");
    sc_trace(mVcdFile, tmp_1_fu_344_p3, "tmp_1_fu_344_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_352_p1, "p_shl_cast_fu_352_p1");
    sc_trace(mVcdFile, tmp_cast_fu_340_p1, "tmp_cast_fu_340_p1");
    sc_trace(mVcdFile, tmp_3_fu_367_p2, "tmp_3_fu_367_p2");
    sc_trace(mVcdFile, tmp_4_fu_378_p2, "tmp_4_fu_378_p2");
    sc_trace(mVcdFile, tmp_7_fu_388_p3, "tmp_7_fu_388_p3");
    sc_trace(mVcdFile, tmp_fu_401_p1, "tmp_fu_401_p1");
    sc_trace(mVcdFile, tmp_9_fu_413_p2, "tmp_9_fu_413_p2");
    sc_trace(mVcdFile, tmp_15_fu_424_p3, "tmp_15_fu_424_p3");
    sc_trace(mVcdFile, tmp_17_fu_437_p1, "tmp_17_fu_437_p1");
    sc_trace(mVcdFile, tmp_18_fu_449_p2, "tmp_18_fu_449_p2");
    sc_trace(mVcdFile, tmp_s_fu_460_p2, "tmp_s_fu_460_p2");
    sc_trace(mVcdFile, tmp_10_fu_470_p2, "tmp_10_fu_470_p2");
    sc_trace(mVcdFile, tmp_19_fu_480_p2, "tmp_19_fu_480_p2");
    sc_trace(mVcdFile, tmp_20_fu_490_p2, "tmp_20_fu_490_p2");
    sc_trace(mVcdFile, tmp_11_fu_500_p2, "tmp_11_fu_500_p2");
    sc_trace(mVcdFile, tmp_12_fu_510_p2, "tmp_12_fu_510_p2");
    sc_trace(mVcdFile, tmp_21_fu_520_p2, "tmp_21_fu_520_p2");
    sc_trace(mVcdFile, tmp_22_fu_530_p2, "tmp_22_fu_530_p2");
    sc_trace(mVcdFile, tmp_13_fu_540_p2, "tmp_13_fu_540_p2");
    sc_trace(mVcdFile, tmp_14_fu_550_p2, "tmp_14_fu_550_p2");
    sc_trace(mVcdFile, tmp_23_fu_560_p2, "tmp_23_fu_560_p2");
    sc_trace(mVcdFile, tmp_24_fu_570_p2, "tmp_24_fu_570_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("mul1.hdltvin.dat");
    mHdltvoutHandle.open("mul1.hdltvout.dat");
}

mul1::~mul1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void mul1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        i_reg_231 = i_1_reg_583.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_231 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        C_addr_1_reg_643 =  (sc_lv<6>) (tmp_18_cast_fu_455_p1.read());
        C_addr_reg_638 =  (sc_lv<6>) (tmp_16_fu_432_p1.read());
        tmp_17_cast_reg_628 = tmp_17_cast_fu_441_p3.read();
        tmp_8_cast_reg_608 = tmp_8_cast_fu_405_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        C_addr_2_reg_664 =  (sc_lv<6>) (tmp_19_cast_fu_485_p1.read());
        C_addr_3_reg_669 =  (sc_lv<6>) (tmp_20_cast_fu_495_p1.read());
        val_reg_648 = sparse_new_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        C_addr_4_reg_684 =  (sc_lv<6>) (tmp_21_cast_fu_525_p1.read());
        C_addr_5_reg_689 =  (sc_lv<6>) (tmp_22_cast_fu_535_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        C_addr_6_reg_704 =  (sc_lv<6>) (tmp_23_cast_fu_565_p1.read());
        C_addr_7_reg_709 =  (sc_lv<6>) (tmp_24_cast_fu_575_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_583 = i_1_fu_334_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        reg_242 = B_q0.read();
        reg_250 = B_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        reg_246 = C_q0.read();
        reg_254 = C_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        reg_258 = C_q0.read();
        reg_262 = C_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        reg_276 = grp_fu_266_p2.read();
        reg_280 = grp_fu_271_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        reg_308 = grp_fu_284_p2.read();
        reg_313 = grp_fu_290_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        reg_318 = grp_fu_296_p2.read();
        reg_323 = grp_fu_302_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_328_p2.read(), ap_const_lv1_0))) {
        tmp_2_reg_588 = tmp_2_fu_356_p2.read();
    }
}

void mul1::thread_A_address0() {
    A_address0 = ap_const_lv6_0;
}

void mul1::thread_A_address1() {
    A_address1 = ap_const_lv6_0;
}

void mul1::thread_A_ce0() {
    A_ce0 = ap_const_logic_0;
}

void mul1::thread_A_ce1() {
    A_ce1 = ap_const_logic_0;
}

void mul1::thread_A_d0() {
    A_d0 = ap_const_lv32_0;
}

void mul1::thread_A_d1() {
    A_d1 = ap_const_lv32_0;
}

void mul1::thread_A_we0() {
    A_we0 = ap_const_logic_0;
}

void mul1::thread_A_we1() {
    A_we1 = ap_const_logic_0;
}

void mul1::thread_B_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        B_address0 =  (sc_lv<6>) (tmp_14_cast_fu_545_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        B_address0 =  (sc_lv<6>) (tmp_12_cast_fu_505_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        B_address0 =  (sc_lv<6>) (tmp_10_cast_fu_465_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        B_address0 =  (sc_lv<6>) (tmp_8_fu_396_p1.read());
    } else {
        B_address0 = "XXXXXX";
    }
}

void mul1::thread_B_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        B_address1 =  (sc_lv<6>) (tmp_15_cast_fu_555_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        B_address1 =  (sc_lv<6>) (tmp_13_cast_fu_515_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        B_address1 =  (sc_lv<6>) (tmp_11_cast_fu_475_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        B_address1 =  (sc_lv<6>) (tmp_9_cast_fu_419_p1.read());
    } else {
        B_address1 = "XXXXXX";
    }
}

void mul1::thread_B_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        B_ce0 = ap_const_logic_1;
    } else {
        B_ce0 = ap_const_logic_0;
    }
}

void mul1::thread_B_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        B_ce1 = ap_const_logic_1;
    } else {
        B_ce1 = ap_const_logic_0;
    }
}

void mul1::thread_C_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        C_address0 = C_addr_6_reg_704.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        C_address0 = C_addr_4_reg_684.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        C_address0 = C_addr_2_reg_664.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        C_address0 = C_addr_reg_638.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        C_address0 =  (sc_lv<6>) (tmp_23_cast_fu_565_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        C_address0 =  (sc_lv<6>) (tmp_21_cast_fu_525_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        C_address0 =  (sc_lv<6>) (tmp_19_cast_fu_485_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        C_address0 =  (sc_lv<6>) (tmp_16_fu_432_p1.read());
    } else {
        C_address0 = "XXXXXX";
    }
}

void mul1::thread_C_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        C_address1 = C_addr_7_reg_709.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        C_address1 = C_addr_5_reg_689.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        C_address1 = C_addr_3_reg_669.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        C_address1 = C_addr_1_reg_643.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        C_address1 =  (sc_lv<6>) (tmp_24_cast_fu_575_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        C_address1 =  (sc_lv<6>) (tmp_22_cast_fu_535_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        C_address1 =  (sc_lv<6>) (tmp_20_cast_fu_495_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        C_address1 =  (sc_lv<6>) (tmp_18_cast_fu_455_p1.read());
    } else {
        C_address1 = "XXXXXX";
    }
}

void mul1::thread_C_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        C_ce0 = ap_const_logic_1;
    } else {
        C_ce0 = ap_const_logic_0;
    }
}

void mul1::thread_C_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        C_ce1 = ap_const_logic_1;
    } else {
        C_ce1 = ap_const_logic_0;
    }
}

void mul1::thread_C_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        C_d0 = reg_318.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        C_d0 = reg_308.read();
    } else {
        C_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void mul1::thread_C_d1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        C_d1 = reg_323.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        C_d1 = reg_313.read();
    } else {
        C_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void mul1::thread_C_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        C_we0 = ap_const_logic_1;
    } else {
        C_we0 = ap_const_logic_0;
    }
}

void mul1::thread_C_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        C_we1 = ap_const_logic_1;
    } else {
        C_we1 = ap_const_logic_0;
    }
}

void mul1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mul1::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void mul1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void mul1::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void mul1::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void mul1::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void mul1::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void mul1::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void mul1::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void mul1::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void mul1::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_328_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void mul1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mul1::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_328_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mul1::thread_exitcond1_fu_328_p2() {
    exitcond1_fu_328_p2 = (!i_reg_231.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_231.read() == ap_const_lv3_6);
}

void mul1::thread_grp_fu_266_p2() {
    grp_fu_266_p2 = (!val_reg_648.read().is_01() || !reg_242.read().is_01())? sc_lv<32>(): sc_bigint<32>(val_reg_648.read()) * sc_bigint<32>(reg_242.read());
}

void mul1::thread_grp_fu_271_p2() {
    grp_fu_271_p2 = (!val_reg_648.read().is_01() || !reg_250.read().is_01())? sc_lv<32>(): sc_bigint<32>(val_reg_648.read()) * sc_bigint<32>(reg_250.read());
}

void mul1::thread_grp_fu_284_p2() {
    grp_fu_284_p2 = (!reg_246.read().is_01() || !reg_276.read().is_01())? sc_lv<32>(): (sc_biguint<32>(reg_246.read()) + sc_biguint<32>(reg_276.read()));
}

void mul1::thread_grp_fu_290_p2() {
    grp_fu_290_p2 = (!reg_254.read().is_01() || !reg_280.read().is_01())? sc_lv<32>(): (sc_biguint<32>(reg_254.read()) + sc_biguint<32>(reg_280.read()));
}

void mul1::thread_grp_fu_296_p2() {
    grp_fu_296_p2 = (!reg_258.read().is_01() || !reg_276.read().is_01())? sc_lv<32>(): (sc_biguint<32>(reg_258.read()) + sc_biguint<32>(reg_276.read()));
}

void mul1::thread_grp_fu_302_p2() {
    grp_fu_302_p2 = (!reg_262.read().is_01() || !reg_280.read().is_01())? sc_lv<32>(): (sc_biguint<32>(reg_262.read()) + sc_biguint<32>(reg_280.read()));
}

void mul1::thread_i_1_fu_334_p2() {
    i_1_fu_334_p2 = (!i_reg_231.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_231.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void mul1::thread_p_shl_cast_fu_352_p1() {
    p_shl_cast_fu_352_p1 = esl_zext<6,5>(tmp_1_fu_344_p3.read());
}

void mul1::thread_sparse_new_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sparse_new_address0 =  (sc_lv<5>) (tmp_4_cast_fu_383_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sparse_new_address0 =  (sc_lv<5>) (tmp_2_cast_fu_362_p1.read());
    } else {
        sparse_new_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void mul1::thread_sparse_new_address1() {
    sparse_new_address1 =  (sc_lv<5>) (tmp_3_cast_fu_373_p1.read());
}

void mul1::thread_sparse_new_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        sparse_new_ce0 = ap_const_logic_1;
    } else {
        sparse_new_ce0 = ap_const_logic_0;
    }
}

void mul1::thread_sparse_new_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sparse_new_ce1 = ap_const_logic_1;
    } else {
        sparse_new_ce1 = ap_const_logic_0;
    }
}

void mul1::thread_tmp_10_cast_fu_465_p1() {
    tmp_10_cast_fu_465_p1 = esl_sext<64,8>(tmp_s_fu_460_p2.read());
}

void mul1::thread_tmp_10_fu_470_p2() {
    tmp_10_fu_470_p2 = (tmp_8_cast_reg_608.read() | ap_const_lv8_3);
}

void mul1::thread_tmp_11_cast_fu_475_p1() {
    tmp_11_cast_fu_475_p1 = esl_sext<64,8>(tmp_10_fu_470_p2.read());
}

void mul1::thread_tmp_11_fu_500_p2() {
    tmp_11_fu_500_p2 = (tmp_8_cast_reg_608.read() | ap_const_lv8_4);
}

void mul1::thread_tmp_12_cast_fu_505_p1() {
    tmp_12_cast_fu_505_p1 = esl_sext<64,8>(tmp_11_fu_500_p2.read());
}

void mul1::thread_tmp_12_fu_510_p2() {
    tmp_12_fu_510_p2 = (tmp_8_cast_reg_608.read() | ap_const_lv8_5);
}

void mul1::thread_tmp_13_cast_fu_515_p1() {
    tmp_13_cast_fu_515_p1 = esl_sext<64,8>(tmp_12_fu_510_p2.read());
}

void mul1::thread_tmp_13_fu_540_p2() {
    tmp_13_fu_540_p2 = (tmp_8_cast_reg_608.read() | ap_const_lv8_6);
}

void mul1::thread_tmp_14_cast_fu_545_p1() {
    tmp_14_cast_fu_545_p1 = esl_sext<64,8>(tmp_13_fu_540_p2.read());
}

void mul1::thread_tmp_14_fu_550_p2() {
    tmp_14_fu_550_p2 = (tmp_8_cast_reg_608.read() | ap_const_lv8_7);
}

void mul1::thread_tmp_15_cast_fu_555_p1() {
    tmp_15_cast_fu_555_p1 = esl_sext<64,8>(tmp_14_fu_550_p2.read());
}

void mul1::thread_tmp_15_fu_424_p3() {
    tmp_15_fu_424_p3 = esl_concat<32,3>(sparse_new_q0.read(), ap_const_lv3_0);
}

void mul1::thread_tmp_16_fu_432_p1() {
    tmp_16_fu_432_p1 = esl_sext<64,35>(tmp_15_fu_424_p3.read());
}

void mul1::thread_tmp_17_cast_fu_441_p3() {
    tmp_17_cast_fu_441_p3 = esl_concat<5,3>(tmp_17_fu_437_p1.read(), ap_const_lv3_0);
}

void mul1::thread_tmp_17_fu_437_p1() {
    tmp_17_fu_437_p1 = sparse_new_q0.read().range(5-1, 0);
}

void mul1::thread_tmp_18_cast_fu_455_p1() {
    tmp_18_cast_fu_455_p1 = esl_zext<64,8>(tmp_18_fu_449_p2.read());
}

void mul1::thread_tmp_18_fu_449_p2() {
    tmp_18_fu_449_p2 = (tmp_17_cast_fu_441_p3.read() | ap_const_lv8_1);
}

void mul1::thread_tmp_19_cast_fu_485_p1() {
    tmp_19_cast_fu_485_p1 = esl_sext<64,8>(tmp_19_fu_480_p2.read());
}

void mul1::thread_tmp_19_fu_480_p2() {
    tmp_19_fu_480_p2 = (tmp_17_cast_reg_628.read() | ap_const_lv8_2);
}

void mul1::thread_tmp_1_fu_344_p3() {
    tmp_1_fu_344_p3 = esl_concat<3,2>(i_reg_231.read(), ap_const_lv2_0);
}

void mul1::thread_tmp_20_cast_fu_495_p1() {
    tmp_20_cast_fu_495_p1 = esl_sext<64,8>(tmp_20_fu_490_p2.read());
}

void mul1::thread_tmp_20_fu_490_p2() {
    tmp_20_fu_490_p2 = (tmp_17_cast_reg_628.read() | ap_const_lv8_3);
}

void mul1::thread_tmp_21_cast_fu_525_p1() {
    tmp_21_cast_fu_525_p1 = esl_sext<64,8>(tmp_21_fu_520_p2.read());
}

void mul1::thread_tmp_21_fu_520_p2() {
    tmp_21_fu_520_p2 = (tmp_17_cast_reg_628.read() | ap_const_lv8_4);
}

void mul1::thread_tmp_22_cast_fu_535_p1() {
    tmp_22_cast_fu_535_p1 = esl_sext<64,8>(tmp_22_fu_530_p2.read());
}

void mul1::thread_tmp_22_fu_530_p2() {
    tmp_22_fu_530_p2 = (tmp_17_cast_reg_628.read() | ap_const_lv8_5);
}

void mul1::thread_tmp_23_cast_fu_565_p1() {
    tmp_23_cast_fu_565_p1 = esl_sext<64,8>(tmp_23_fu_560_p2.read());
}

void mul1::thread_tmp_23_fu_560_p2() {
    tmp_23_fu_560_p2 = (tmp_17_cast_reg_628.read() | ap_const_lv8_6);
}

void mul1::thread_tmp_24_cast_fu_575_p1() {
    tmp_24_cast_fu_575_p1 = esl_sext<64,8>(tmp_24_fu_570_p2.read());
}

void mul1::thread_tmp_24_fu_570_p2() {
    tmp_24_fu_570_p2 = (tmp_17_cast_reg_628.read() | ap_const_lv8_7);
}

void mul1::thread_tmp_2_cast_fu_362_p1() {
    tmp_2_cast_fu_362_p1 = esl_sext<64,6>(tmp_2_fu_356_p2.read());
}

void mul1::thread_tmp_2_fu_356_p2() {
    tmp_2_fu_356_p2 = (!p_shl_cast_fu_352_p1.read().is_01() || !tmp_cast_fu_340_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(p_shl_cast_fu_352_p1.read()) - sc_biguint<6>(tmp_cast_fu_340_p1.read()));
}

void mul1::thread_tmp_3_cast_fu_373_p1() {
    tmp_3_cast_fu_373_p1 = esl_sext<64,6>(tmp_3_fu_367_p2.read());
}

void mul1::thread_tmp_3_fu_367_p2() {
    tmp_3_fu_367_p2 = (!ap_const_lv6_1.is_01() || !tmp_2_fu_356_p2.read().is_01())? sc_lv<6>(): (sc_biguint<6>(ap_const_lv6_1) + sc_bigint<6>(tmp_2_fu_356_p2.read()));
}

void mul1::thread_tmp_4_cast_fu_383_p1() {
    tmp_4_cast_fu_383_p1 = esl_sext<64,6>(tmp_4_fu_378_p2.read());
}

void mul1::thread_tmp_4_fu_378_p2() {
    tmp_4_fu_378_p2 = (!ap_const_lv6_2.is_01() || !tmp_2_reg_588.read().is_01())? sc_lv<6>(): (sc_biguint<6>(ap_const_lv6_2) + sc_bigint<6>(tmp_2_reg_588.read()));
}

void mul1::thread_tmp_7_fu_388_p3() {
    tmp_7_fu_388_p3 = esl_concat<32,3>(sparse_new_q1.read(), ap_const_lv3_0);
}

void mul1::thread_tmp_8_cast_fu_405_p3() {
    tmp_8_cast_fu_405_p3 = esl_concat<5,3>(tmp_fu_401_p1.read(), ap_const_lv3_0);
}

void mul1::thread_tmp_8_fu_396_p1() {
    tmp_8_fu_396_p1 = esl_sext<64,35>(tmp_7_fu_388_p3.read());
}

void mul1::thread_tmp_9_cast_fu_419_p1() {
    tmp_9_cast_fu_419_p1 = esl_zext<64,8>(tmp_9_fu_413_p2.read());
}

void mul1::thread_tmp_9_fu_413_p2() {
    tmp_9_fu_413_p2 = (tmp_8_cast_fu_405_p3.read() | ap_const_lv8_1);
}

void mul1::thread_tmp_cast_fu_340_p1() {
    tmp_cast_fu_340_p1 = esl_zext<6,3>(i_reg_231.read());
}

void mul1::thread_tmp_fu_401_p1() {
    tmp_fu_401_p1 = sparse_new_q1.read().range(5-1, 0);
}

void mul1::thread_tmp_s_fu_460_p2() {
    tmp_s_fu_460_p2 = (tmp_8_cast_reg_608.read() | ap_const_lv8_2);
}

void mul1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_328_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<10>) ("XXXXXXXXXX");
            break;
    }
}

void mul1::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_address0\" :  \"" << A_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_ce0\" :  \"" << A_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_we0\" :  \"" << A_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_d0\" :  \"" << A_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_q0\" :  \"" << A_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_address1\" :  \"" << A_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_ce1\" :  \"" << A_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_we1\" :  \"" << A_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_d1\" :  \"" << A_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_q1\" :  \"" << A_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_address0\" :  \"" << B_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_ce0\" :  \"" << B_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_q0\" :  \"" << B_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_address1\" :  \"" << B_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_ce1\" :  \"" << B_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_q1\" :  \"" << B_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_address0\" :  \"" << C_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_ce0\" :  \"" << C_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_we0\" :  \"" << C_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_d0\" :  \"" << C_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"C_q0\" :  \"" << C_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_address1\" :  \"" << C_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_ce1\" :  \"" << C_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_we1\" :  \"" << C_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_d1\" :  \"" << C_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"C_q1\" :  \"" << C_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sparse_new_address0\" :  \"" << sparse_new_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sparse_new_ce0\" :  \"" << sparse_new_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sparse_new_q0\" :  \"" << sparse_new_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sparse_new_address1\" :  \"" << sparse_new_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sparse_new_ce1\" :  \"" << sparse_new_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sparse_new_q1\" :  \"" << sparse_new_q1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}


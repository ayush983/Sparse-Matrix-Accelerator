// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mul1,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=513,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=192,HLS_SYN_FF=6417,HLS_SYN_LUT=4999,HLS_VERSION=2018_2}" *)

module mul1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        B_address0,
        B_ce0,
        B_q0,
        B_address1,
        B_ce1,
        B_q1,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        C_address1,
        C_ce1,
        C_we1,
        C_d1,
        C_q1
);

parameter    ap_ST_fsm_state1 = 65'd1;
parameter    ap_ST_fsm_state2 = 65'd2;
parameter    ap_ST_fsm_state3 = 65'd4;
parameter    ap_ST_fsm_state4 = 65'd8;
parameter    ap_ST_fsm_state5 = 65'd16;
parameter    ap_ST_fsm_state6 = 65'd32;
parameter    ap_ST_fsm_state7 = 65'd64;
parameter    ap_ST_fsm_state8 = 65'd128;
parameter    ap_ST_fsm_state9 = 65'd256;
parameter    ap_ST_fsm_state10 = 65'd512;
parameter    ap_ST_fsm_state11 = 65'd1024;
parameter    ap_ST_fsm_state12 = 65'd2048;
parameter    ap_ST_fsm_state13 = 65'd4096;
parameter    ap_ST_fsm_state14 = 65'd8192;
parameter    ap_ST_fsm_state15 = 65'd16384;
parameter    ap_ST_fsm_state16 = 65'd32768;
parameter    ap_ST_fsm_state17 = 65'd65536;
parameter    ap_ST_fsm_state18 = 65'd131072;
parameter    ap_ST_fsm_state19 = 65'd262144;
parameter    ap_ST_fsm_state20 = 65'd524288;
parameter    ap_ST_fsm_state21 = 65'd1048576;
parameter    ap_ST_fsm_state22 = 65'd2097152;
parameter    ap_ST_fsm_state23 = 65'd4194304;
parameter    ap_ST_fsm_state24 = 65'd8388608;
parameter    ap_ST_fsm_state25 = 65'd16777216;
parameter    ap_ST_fsm_state26 = 65'd33554432;
parameter    ap_ST_fsm_state27 = 65'd67108864;
parameter    ap_ST_fsm_state28 = 65'd134217728;
parameter    ap_ST_fsm_state29 = 65'd268435456;
parameter    ap_ST_fsm_state30 = 65'd536870912;
parameter    ap_ST_fsm_state31 = 65'd1073741824;
parameter    ap_ST_fsm_state32 = 65'd2147483648;
parameter    ap_ST_fsm_state33 = 65'd4294967296;
parameter    ap_ST_fsm_state34 = 65'd8589934592;
parameter    ap_ST_fsm_state35 = 65'd17179869184;
parameter    ap_ST_fsm_state36 = 65'd34359738368;
parameter    ap_ST_fsm_state37 = 65'd68719476736;
parameter    ap_ST_fsm_state38 = 65'd137438953472;
parameter    ap_ST_fsm_state39 = 65'd274877906944;
parameter    ap_ST_fsm_state40 = 65'd549755813888;
parameter    ap_ST_fsm_state41 = 65'd1099511627776;
parameter    ap_ST_fsm_state42 = 65'd2199023255552;
parameter    ap_ST_fsm_state43 = 65'd4398046511104;
parameter    ap_ST_fsm_state44 = 65'd8796093022208;
parameter    ap_ST_fsm_state45 = 65'd17592186044416;
parameter    ap_ST_fsm_state46 = 65'd35184372088832;
parameter    ap_ST_fsm_state47 = 65'd70368744177664;
parameter    ap_ST_fsm_state48 = 65'd140737488355328;
parameter    ap_ST_fsm_state49 = 65'd281474976710656;
parameter    ap_ST_fsm_state50 = 65'd562949953421312;
parameter    ap_ST_fsm_state51 = 65'd1125899906842624;
parameter    ap_ST_fsm_state52 = 65'd2251799813685248;
parameter    ap_ST_fsm_state53 = 65'd4503599627370496;
parameter    ap_ST_fsm_state54 = 65'd9007199254740992;
parameter    ap_ST_fsm_state55 = 65'd18014398509481984;
parameter    ap_ST_fsm_state56 = 65'd36028797018963968;
parameter    ap_ST_fsm_state57 = 65'd72057594037927936;
parameter    ap_ST_fsm_state58 = 65'd144115188075855872;
parameter    ap_ST_fsm_state59 = 65'd288230376151711744;
parameter    ap_ST_fsm_state60 = 65'd576460752303423488;
parameter    ap_ST_fsm_state61 = 65'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 65'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 65'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 65'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 65'd18446744073709551616;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [5:0] A_address1;
output   A_ce1;
input  [31:0] A_q1;
output  [5:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [5:0] B_address1;
output   B_ce1;
input  [31:0] B_q1;
output  [5:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
output  [5:0] C_address1;
output   C_ce1;
output   C_we1;
output  [31:0] C_d1;
input  [31:0] C_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] A_address0;
reg A_ce0;
reg[5:0] A_address1;
reg A_ce1;
reg[5:0] B_address0;
reg B_ce0;
reg[5:0] B_address1;
reg B_ce1;
reg[5:0] C_address0;
reg C_ce0;
reg C_we0;
reg[31:0] C_d0;
reg[5:0] C_address1;
reg C_ce1;
reg C_we1;
reg[31:0] C_d1;

(* fsm_encoding = "none" *) reg   [64:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_859;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state34;
reg   [31:0] reg_863;
wire   [3:0] k_1_fu_873_p2;
reg   [3:0] k_1_reg_1912;
wire    ap_CS_fsm_state2;
reg   [31:0] C_load_2_reg_1917;
wire    ap_CS_fsm_state4;
reg   [31:0] C_load_3_reg_1922;
reg   [31:0] C_load_4_reg_1927;
wire    ap_CS_fsm_state5;
reg   [31:0] C_load_5_reg_1932;
reg   [31:0] C_load_6_reg_1937;
wire    ap_CS_fsm_state6;
reg   [31:0] C_load_7_reg_1942;
reg   [31:0] C_load_8_reg_1947;
wire    ap_CS_fsm_state7;
reg   [31:0] C_load_9_reg_1952;
reg   [31:0] C_load_10_reg_1957;
wire    ap_CS_fsm_state8;
reg   [31:0] C_load_11_reg_1962;
reg   [31:0] C_load_12_reg_1967;
wire    ap_CS_fsm_state9;
reg   [31:0] C_load_13_reg_1972;
reg   [31:0] C_load_14_reg_1977;
wire    ap_CS_fsm_state10;
reg   [31:0] C_load_15_reg_1982;
reg   [31:0] C_load_16_reg_1987;
wire    ap_CS_fsm_state11;
reg   [31:0] C_load_17_reg_1992;
reg   [31:0] C_load_18_reg_1997;
wire    ap_CS_fsm_state12;
reg   [31:0] C_load_19_reg_2002;
reg   [31:0] C_load_20_reg_2007;
wire    ap_CS_fsm_state13;
reg   [31:0] C_load_21_reg_2012;
reg   [31:0] C_load_22_reg_2017;
wire    ap_CS_fsm_state14;
reg   [31:0] C_load_23_reg_2022;
reg   [31:0] C_load_24_reg_2027;
wire    ap_CS_fsm_state15;
reg   [31:0] C_load_25_reg_2032;
reg   [31:0] C_load_26_reg_2037;
wire    ap_CS_fsm_state16;
reg   [31:0] C_load_27_reg_2042;
reg   [31:0] C_load_28_reg_2047;
wire    ap_CS_fsm_state17;
reg   [31:0] C_load_29_reg_2052;
reg   [31:0] C_load_30_reg_2057;
wire    ap_CS_fsm_state18;
reg   [31:0] C_load_31_reg_2062;
reg   [31:0] C_load_32_reg_2067;
wire    ap_CS_fsm_state19;
reg   [31:0] C_load_33_reg_2072;
reg   [31:0] C_load_34_reg_2077;
wire    ap_CS_fsm_state20;
reg   [31:0] C_load_35_reg_2082;
reg   [31:0] C_load_36_reg_2087;
wire    ap_CS_fsm_state21;
reg   [31:0] C_load_37_reg_2092;
reg   [31:0] C_load_38_reg_2097;
wire    ap_CS_fsm_state22;
reg   [31:0] C_load_39_reg_2102;
reg   [31:0] C_load_40_reg_2107;
wire    ap_CS_fsm_state23;
reg   [31:0] C_load_41_reg_2112;
reg   [31:0] C_load_42_reg_2117;
wire    ap_CS_fsm_state24;
reg   [31:0] C_load_43_reg_2122;
reg   [31:0] C_load_44_reg_2127;
wire    ap_CS_fsm_state25;
reg   [31:0] C_load_45_reg_2132;
reg   [31:0] C_load_46_reg_2137;
wire    ap_CS_fsm_state26;
reg   [31:0] C_load_47_reg_2142;
reg   [31:0] C_load_48_reg_2147;
wire    ap_CS_fsm_state27;
reg   [31:0] C_load_49_reg_2152;
reg   [31:0] C_load_50_reg_2157;
wire    ap_CS_fsm_state28;
reg   [31:0] C_load_51_reg_2162;
reg   [31:0] C_load_52_reg_2167;
wire    ap_CS_fsm_state29;
reg   [31:0] C_load_53_reg_2172;
reg   [31:0] C_load_54_reg_2177;
wire    ap_CS_fsm_state30;
reg   [31:0] C_load_55_reg_2182;
wire    ap_CS_fsm_state31;
wire  signed [3:0] tmp_1_fu_884_p2;
reg  signed [3:0] tmp_1_reg_2192;
wire   [6:0] tmp_s_fu_895_p3;
reg   [6:0] tmp_s_reg_2203;
reg   [31:0] C_load_56_reg_2223;
reg   [31:0] C_load_57_reg_2228;
wire    ap_CS_fsm_state32;
reg  signed [31:0] A_load_reg_2253;
reg  signed [31:0] B_load_reg_2265;
reg  signed [31:0] B_load_1_reg_2277;
reg  signed [31:0] A_load_1_reg_2289;
reg   [31:0] C_load_58_reg_2301;
reg   [31:0] C_load_59_reg_2306;
wire    ap_CS_fsm_state33;
wire   [31:0] tmp_5_fu_1020_p2;
reg   [31:0] tmp_5_reg_2331;
wire   [31:0] tmp_5_0_1_fu_1024_p2;
reg   [31:0] tmp_5_0_1_reg_2336;
reg  signed [31:0] B_load_2_reg_2341;
reg  signed [31:0] B_load_3_reg_2353;
reg  signed [31:0] A_load_2_reg_2365;
reg  signed [31:0] A_load_3_reg_2377;
reg   [31:0] C_load_60_reg_2389;
reg   [31:0] C_load_61_reg_2394;
wire   [31:0] tmp_5_0_2_fu_1085_p2;
reg   [31:0] tmp_5_0_2_reg_2419;
wire   [31:0] tmp_5_0_3_fu_1089_p2;
reg   [31:0] tmp_5_0_3_reg_2424;
reg  signed [31:0] B_load_4_reg_2429;
reg  signed [31:0] B_load_5_reg_2441;
reg  signed [31:0] A_load_4_reg_2453;
reg  signed [31:0] A_load_5_reg_2465;
wire   [31:0] tmp_5_0_4_fu_1103_p2;
reg   [31:0] tmp_5_0_4_reg_2477;
wire    ap_CS_fsm_state35;
wire   [31:0] tmp_5_0_5_fu_1107_p2;
reg   [31:0] tmp_5_0_5_reg_2482;
reg  signed [31:0] B_load_6_reg_2487;
reg  signed [31:0] B_load_7_reg_2499;
reg  signed [31:0] A_load_6_reg_2511;
reg  signed [31:0] A_load_7_reg_2523;
wire   [31:0] tmp_5_0_6_fu_1121_p2;
reg   [31:0] tmp_5_0_6_reg_2535;
wire    ap_CS_fsm_state36;
wire   [31:0] tmp_5_0_7_fu_1125_p2;
reg   [31:0] tmp_5_0_7_reg_2540;
wire   [31:0] tmp_5_1_fu_1129_p2;
reg   [31:0] tmp_5_1_reg_2545;
wire   [31:0] tmp_5_1_1_fu_1133_p2;
reg   [31:0] tmp_5_1_1_reg_2550;
wire   [31:0] tmp_5_1_2_fu_1137_p2;
reg   [31:0] tmp_5_1_2_reg_2555;
wire   [31:0] tmp_5_1_3_fu_1141_p2;
reg   [31:0] tmp_5_1_3_reg_2560;
wire   [31:0] tmp_5_1_4_fu_1145_p2;
reg   [31:0] tmp_5_1_4_reg_2565;
wire   [31:0] tmp_5_1_5_fu_1149_p2;
reg   [31:0] tmp_5_1_5_reg_2570;
wire   [31:0] tmp_5_1_6_fu_1153_p2;
reg   [31:0] tmp_5_1_6_reg_2575;
wire   [31:0] tmp_5_1_7_fu_1157_p2;
reg   [31:0] tmp_5_1_7_reg_2580;
wire   [31:0] tmp_5_2_fu_1161_p2;
reg   [31:0] tmp_5_2_reg_2585;
wire   [31:0] tmp_5_2_1_fu_1165_p2;
reg   [31:0] tmp_5_2_1_reg_2590;
wire   [31:0] tmp_5_2_2_fu_1169_p2;
reg   [31:0] tmp_5_2_2_reg_2595;
wire   [31:0] tmp_5_2_3_fu_1173_p2;
reg   [31:0] tmp_5_2_3_reg_2600;
wire   [31:0] tmp_5_2_4_fu_1177_p2;
reg   [31:0] tmp_5_2_4_reg_2605;
wire   [31:0] tmp_5_2_5_fu_1181_p2;
reg   [31:0] tmp_5_2_5_reg_2610;
wire   [31:0] tmp_5_2_6_fu_1185_p2;
reg   [31:0] tmp_5_2_6_reg_2615;
wire   [31:0] tmp_5_2_7_fu_1189_p2;
reg   [31:0] tmp_5_2_7_reg_2620;
wire   [31:0] tmp_5_3_fu_1193_p2;
reg   [31:0] tmp_5_3_reg_2625;
wire   [31:0] tmp_5_3_1_fu_1197_p2;
reg   [31:0] tmp_5_3_1_reg_2630;
wire   [31:0] tmp_5_3_2_fu_1201_p2;
reg   [31:0] tmp_5_3_2_reg_2635;
wire   [31:0] tmp_5_3_3_fu_1205_p2;
reg   [31:0] tmp_5_3_3_reg_2640;
wire   [31:0] tmp_5_3_4_fu_1209_p2;
reg   [31:0] tmp_5_3_4_reg_2645;
wire   [31:0] tmp_5_3_5_fu_1213_p2;
reg   [31:0] tmp_5_3_5_reg_2650;
wire   [31:0] tmp_5_3_6_fu_1217_p2;
reg   [31:0] tmp_5_3_6_reg_2655;
wire   [31:0] tmp_5_3_7_fu_1221_p2;
reg   [31:0] tmp_5_3_7_reg_2660;
wire   [31:0] tmp_5_4_fu_1225_p2;
reg   [31:0] tmp_5_4_reg_2665;
wire   [31:0] tmp_5_4_1_fu_1229_p2;
reg   [31:0] tmp_5_4_1_reg_2670;
wire   [31:0] tmp_5_4_2_fu_1233_p2;
reg   [31:0] tmp_5_4_2_reg_2675;
wire   [31:0] tmp_5_4_3_fu_1237_p2;
reg   [31:0] tmp_5_4_3_reg_2680;
wire   [31:0] tmp_5_4_4_fu_1241_p2;
reg   [31:0] tmp_5_4_4_reg_2685;
wire   [31:0] tmp_5_4_5_fu_1245_p2;
reg   [31:0] tmp_5_4_5_reg_2690;
wire   [31:0] tmp_5_4_6_fu_1249_p2;
reg   [31:0] tmp_5_4_6_reg_2695;
wire   [31:0] tmp_5_4_7_fu_1253_p2;
reg   [31:0] tmp_5_4_7_reg_2700;
wire   [31:0] tmp_5_5_fu_1257_p2;
reg   [31:0] tmp_5_5_reg_2705;
wire   [31:0] tmp_5_5_1_fu_1261_p2;
reg   [31:0] tmp_5_5_1_reg_2710;
wire   [31:0] tmp_5_5_2_fu_1265_p2;
reg   [31:0] tmp_5_5_2_reg_2715;
wire   [31:0] tmp_5_5_3_fu_1269_p2;
reg   [31:0] tmp_5_5_3_reg_2720;
wire   [31:0] tmp_5_5_4_fu_1273_p2;
reg   [31:0] tmp_5_5_4_reg_2725;
wire   [31:0] tmp_5_5_5_fu_1277_p2;
reg   [31:0] tmp_5_5_5_reg_2730;
wire   [31:0] tmp_5_5_6_fu_1281_p2;
reg   [31:0] tmp_5_5_6_reg_2735;
wire   [31:0] tmp_5_5_7_fu_1285_p2;
reg   [31:0] tmp_5_5_7_reg_2740;
wire   [31:0] tmp_5_6_fu_1289_p2;
reg   [31:0] tmp_5_6_reg_2745;
wire   [31:0] tmp_5_6_1_fu_1293_p2;
reg   [31:0] tmp_5_6_1_reg_2750;
wire   [31:0] tmp_5_6_2_fu_1297_p2;
reg   [31:0] tmp_5_6_2_reg_2755;
wire   [31:0] tmp_5_6_3_fu_1301_p2;
reg   [31:0] tmp_5_6_3_reg_2760;
wire   [31:0] tmp_5_6_4_fu_1305_p2;
reg   [31:0] tmp_5_6_4_reg_2765;
wire   [31:0] tmp_5_6_5_fu_1309_p2;
reg   [31:0] tmp_5_6_5_reg_2770;
wire   [31:0] tmp_5_6_6_fu_1313_p2;
reg   [31:0] tmp_5_6_6_reg_2775;
wire   [31:0] tmp_5_6_7_fu_1317_p2;
reg   [31:0] tmp_5_6_7_reg_2780;
wire   [31:0] tmp_5_7_fu_1321_p2;
reg   [31:0] tmp_5_7_reg_2785;
wire   [31:0] tmp_5_7_1_fu_1325_p2;
reg   [31:0] tmp_5_7_1_reg_2790;
wire   [31:0] tmp_5_7_2_fu_1329_p2;
reg   [31:0] tmp_5_7_2_reg_2795;
wire   [31:0] tmp_5_7_3_fu_1333_p2;
reg   [31:0] tmp_5_7_3_reg_2800;
wire   [31:0] tmp_5_7_4_fu_1337_p2;
reg   [31:0] tmp_5_7_4_reg_2805;
wire   [31:0] tmp_5_7_5_fu_1341_p2;
reg   [31:0] tmp_5_7_5_reg_2810;
wire   [31:0] tmp_5_7_6_fu_1345_p2;
reg   [31:0] tmp_5_7_6_reg_2815;
wire   [31:0] tmp_5_7_7_fu_1349_p2;
reg   [31:0] tmp_5_7_7_reg_2820;
wire   [31:0] tmp_6_1_fu_1363_p2;
reg   [31:0] tmp_6_1_reg_2825;
wire    ap_CS_fsm_state37;
wire   [31:0] tmp_6_1_1_fu_1367_p2;
reg   [31:0] tmp_6_1_1_reg_2830;
wire   [31:0] tmp_6_1_2_fu_1371_p2;
reg   [31:0] tmp_6_1_2_reg_2835;
wire   [31:0] tmp_6_1_3_fu_1375_p2;
reg   [31:0] tmp_6_1_3_reg_2840;
wire   [31:0] tmp_6_1_4_fu_1379_p2;
reg   [31:0] tmp_6_1_4_reg_2845;
wire   [31:0] tmp_6_1_5_fu_1383_p2;
reg   [31:0] tmp_6_1_5_reg_2850;
wire   [31:0] tmp_6_1_6_fu_1387_p2;
reg   [31:0] tmp_6_1_6_reg_2855;
wire   [31:0] tmp_6_1_7_fu_1391_p2;
reg   [31:0] tmp_6_1_7_reg_2860;
wire   [31:0] tmp_6_2_fu_1395_p2;
reg   [31:0] tmp_6_2_reg_2865;
wire   [31:0] tmp_6_2_1_fu_1399_p2;
reg   [31:0] tmp_6_2_1_reg_2870;
wire   [31:0] tmp_6_2_2_fu_1403_p2;
reg   [31:0] tmp_6_2_2_reg_2875;
wire   [31:0] tmp_6_2_3_fu_1407_p2;
reg   [31:0] tmp_6_2_3_reg_2880;
wire   [31:0] tmp_6_2_4_fu_1411_p2;
reg   [31:0] tmp_6_2_4_reg_2885;
wire   [31:0] tmp_6_2_5_fu_1415_p2;
reg   [31:0] tmp_6_2_5_reg_2890;
wire   [31:0] tmp_6_2_6_fu_1419_p2;
reg   [31:0] tmp_6_2_6_reg_2895;
wire   [31:0] tmp_6_2_7_fu_1423_p2;
reg   [31:0] tmp_6_2_7_reg_2900;
wire   [31:0] tmp_6_3_fu_1427_p2;
reg   [31:0] tmp_6_3_reg_2905;
wire   [31:0] tmp_6_3_1_fu_1431_p2;
reg   [31:0] tmp_6_3_1_reg_2910;
wire   [31:0] tmp_6_3_2_fu_1435_p2;
reg   [31:0] tmp_6_3_2_reg_2915;
wire   [31:0] tmp_6_3_3_fu_1439_p2;
reg   [31:0] tmp_6_3_3_reg_2920;
wire   [31:0] tmp_6_3_4_fu_1443_p2;
reg   [31:0] tmp_6_3_4_reg_2925;
wire   [31:0] tmp_6_3_5_fu_1447_p2;
reg   [31:0] tmp_6_3_5_reg_2930;
wire   [31:0] tmp_6_3_6_fu_1451_p2;
reg   [31:0] tmp_6_3_6_reg_2935;
wire   [31:0] tmp_6_3_7_fu_1455_p2;
reg   [31:0] tmp_6_3_7_reg_2940;
wire   [31:0] tmp_6_4_fu_1459_p2;
reg   [31:0] tmp_6_4_reg_2945;
wire   [31:0] tmp_6_4_1_fu_1463_p2;
reg   [31:0] tmp_6_4_1_reg_2950;
wire   [31:0] tmp_6_4_2_fu_1467_p2;
reg   [31:0] tmp_6_4_2_reg_2955;
wire   [31:0] tmp_6_4_3_fu_1471_p2;
reg   [31:0] tmp_6_4_3_reg_2960;
wire   [31:0] tmp_6_4_4_fu_1475_p2;
reg   [31:0] tmp_6_4_4_reg_2965;
wire   [31:0] tmp_6_4_5_fu_1479_p2;
reg   [31:0] tmp_6_4_5_reg_2970;
wire   [31:0] tmp_6_4_6_fu_1483_p2;
reg   [31:0] tmp_6_4_6_reg_2975;
wire   [31:0] tmp_6_4_7_fu_1487_p2;
reg   [31:0] tmp_6_4_7_reg_2980;
wire   [31:0] tmp_6_5_fu_1491_p2;
reg   [31:0] tmp_6_5_reg_2985;
wire   [31:0] tmp_6_5_1_fu_1495_p2;
reg   [31:0] tmp_6_5_1_reg_2990;
wire   [31:0] tmp_6_5_2_fu_1499_p2;
reg   [31:0] tmp_6_5_2_reg_2995;
wire   [31:0] tmp_6_5_3_fu_1503_p2;
reg   [31:0] tmp_6_5_3_reg_3000;
wire   [31:0] tmp_6_5_4_fu_1507_p2;
reg   [31:0] tmp_6_5_4_reg_3005;
wire   [31:0] tmp_6_5_5_fu_1511_p2;
reg   [31:0] tmp_6_5_5_reg_3010;
wire   [31:0] tmp_6_5_6_fu_1515_p2;
reg   [31:0] tmp_6_5_6_reg_3015;
wire   [31:0] tmp_6_5_7_fu_1519_p2;
reg   [31:0] tmp_6_5_7_reg_3020;
wire   [31:0] tmp_6_6_fu_1523_p2;
reg   [31:0] tmp_6_6_reg_3025;
wire   [31:0] tmp_6_6_1_fu_1527_p2;
reg   [31:0] tmp_6_6_1_reg_3030;
wire   [31:0] tmp_6_6_2_fu_1531_p2;
reg   [31:0] tmp_6_6_2_reg_3035;
wire   [31:0] tmp_6_6_3_fu_1535_p2;
reg   [31:0] tmp_6_6_3_reg_3040;
wire   [31:0] tmp_6_6_4_fu_1539_p2;
reg   [31:0] tmp_6_6_4_reg_3045;
wire   [31:0] tmp_6_6_5_fu_1543_p2;
reg   [31:0] tmp_6_6_5_reg_3050;
wire   [31:0] tmp_6_6_6_fu_1547_p2;
reg   [31:0] tmp_6_6_6_reg_3055;
wire   [31:0] tmp_6_6_7_fu_1551_p2;
reg   [31:0] tmp_6_6_7_reg_3060;
wire   [31:0] tmp_6_7_fu_1555_p2;
reg   [31:0] tmp_6_7_reg_3065;
wire   [31:0] tmp_6_7_1_fu_1559_p2;
reg   [31:0] tmp_6_7_1_reg_3070;
wire   [31:0] tmp_6_7_2_fu_1563_p2;
reg   [31:0] tmp_6_7_2_reg_3075;
wire   [31:0] tmp_6_7_3_fu_1567_p2;
reg   [31:0] tmp_6_7_3_reg_3080;
wire   [31:0] tmp_6_7_4_fu_1571_p2;
reg   [31:0] tmp_6_7_4_reg_3085;
wire   [31:0] tmp_6_7_5_fu_1575_p2;
reg   [31:0] tmp_6_7_5_reg_3090;
wire   [31:0] tmp_6_7_6_fu_1579_p2;
reg   [31:0] tmp_6_7_6_reg_3095;
wire   [31:0] tmp_6_7_7_fu_1584_p2;
reg   [31:0] tmp_6_7_7_reg_3100;
reg   [3:0] k_reg_847;
wire    ap_CS_fsm_state65;
wire   [63:0] tmp_fu_879_p1;
wire   [63:0] tmp_1_cast_fu_890_p1;
wire   [63:0] tmp_3_fu_903_p1;
wire   [63:0] tmp_10_fu_914_p3;
wire   [63:0] tmp_2_fu_923_p3;
wire   [63:0] tmp_3_cast_fu_935_p1;
wire   [63:0] tmp_12_fu_945_p3;
wire   [63:0] tmp_14_fu_959_p3;
wire   [63:0] tmp_4_fu_972_p3;
wire   [63:0] tmp_7_cast_fu_987_p1;
wire   [63:0] tmp_16_fu_997_p3;
wire   [63:0] tmp_18_fu_1011_p3;
wire   [63:0] tmp_8_fu_1028_p3;
wire   [63:0] tmp_9_cast_fu_1040_p1;
wire   [63:0] tmp_20_fu_1050_p3;
wire   [63:0] tmp_22_fu_1064_p3;
wire   [31:0] tmp_6_fu_1073_p2;
wire   [31:0] tmp_6_0_1_fu_1079_p2;
wire   [31:0] tmp_6_0_2_fu_1093_p2;
wire   [31:0] tmp_6_0_3_fu_1098_p2;
wire   [31:0] tmp_6_0_4_fu_1111_p2;
wire   [31:0] tmp_6_0_5_fu_1116_p2;
wire   [31:0] tmp_6_0_6_fu_1353_p2;
wire   [31:0] tmp_6_0_7_fu_1358_p2;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state64;
wire   [6:0] tmp_9_fu_908_p2;
wire  signed [4:0] tmp_3_cast4_fu_932_p1;
wire   [6:0] tmp_11_fu_940_p2;
wire   [6:0] tmp_13_fu_954_p2;
wire   [5:0] tmp_cast2_fu_968_p1;
wire   [5:0] tmp_7_fu_981_p2;
wire   [6:0] tmp_15_fu_992_p2;
wire   [6:0] tmp_17_fu_1006_p2;
wire  signed [5:0] tmp_9_cast3_fu_1037_p1;
wire   [6:0] tmp_19_fu_1045_p2;
wire   [6:0] tmp_21_fu_1059_p2;
wire   [0:0] exitcond2_fu_867_p2;
reg   [64:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 65'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        k_reg_847 <= k_1_reg_1912;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_847 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        A_load_1_reg_2289 <= A_q1;
        A_load_reg_2253 <= A_q0;
        B_load_1_reg_2277 <= B_q1;
        B_load_reg_2265 <= B_q0;
        C_load_58_reg_2301 <= C_q0;
        C_load_59_reg_2306 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        A_load_2_reg_2365 <= A_q0;
        A_load_3_reg_2377 <= A_q1;
        B_load_2_reg_2341 <= B_q0;
        B_load_3_reg_2353 <= B_q1;
        C_load_60_reg_2389 <= C_q0;
        C_load_61_reg_2394 <= C_q1;
        tmp_5_0_1_reg_2336 <= tmp_5_0_1_fu_1024_p2;
        tmp_5_reg_2331 <= tmp_5_fu_1020_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        A_load_4_reg_2453 <= A_q0;
        A_load_5_reg_2465 <= A_q1;
        B_load_4_reg_2429 <= B_q0;
        B_load_5_reg_2441 <= B_q1;
        tmp_5_0_2_reg_2419 <= tmp_5_0_2_fu_1085_p2;
        tmp_5_0_3_reg_2424 <= tmp_5_0_3_fu_1089_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        A_load_6_reg_2511 <= A_q0;
        A_load_7_reg_2523 <= A_q1;
        B_load_6_reg_2487 <= B_q0;
        B_load_7_reg_2499 <= B_q1;
        tmp_5_0_4_reg_2477 <= tmp_5_0_4_fu_1103_p2;
        tmp_5_0_5_reg_2482 <= tmp_5_0_5_fu_1107_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        C_load_10_reg_1957 <= C_q0;
        C_load_11_reg_1962 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        C_load_12_reg_1967 <= C_q0;
        C_load_13_reg_1972 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_load_14_reg_1977 <= C_q0;
        C_load_15_reg_1982 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        C_load_16_reg_1987 <= C_q0;
        C_load_17_reg_1992 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        C_load_18_reg_1997 <= C_q0;
        C_load_19_reg_2002 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        C_load_20_reg_2007 <= C_q0;
        C_load_21_reg_2012 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        C_load_22_reg_2017 <= C_q0;
        C_load_23_reg_2022 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        C_load_24_reg_2027 <= C_q0;
        C_load_25_reg_2032 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        C_load_26_reg_2037 <= C_q0;
        C_load_27_reg_2042 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        C_load_28_reg_2047 <= C_q0;
        C_load_29_reg_2052 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        C_load_2_reg_1917 <= C_q0;
        C_load_3_reg_1922 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        C_load_30_reg_2057 <= C_q0;
        C_load_31_reg_2062 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        C_load_32_reg_2067 <= C_q0;
        C_load_33_reg_2072 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        C_load_34_reg_2077 <= C_q0;
        C_load_35_reg_2082 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        C_load_36_reg_2087 <= C_q0;
        C_load_37_reg_2092 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        C_load_38_reg_2097 <= C_q0;
        C_load_39_reg_2102 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        C_load_40_reg_2107 <= C_q0;
        C_load_41_reg_2112 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        C_load_42_reg_2117 <= C_q0;
        C_load_43_reg_2122 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        C_load_44_reg_2127 <= C_q0;
        C_load_45_reg_2132 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        C_load_46_reg_2137 <= C_q0;
        C_load_47_reg_2142 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        C_load_48_reg_2147 <= C_q0;
        C_load_49_reg_2152 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        C_load_4_reg_1927 <= C_q0;
        C_load_5_reg_1932 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        C_load_50_reg_2157 <= C_q0;
        C_load_51_reg_2162 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        C_load_52_reg_2167 <= C_q0;
        C_load_53_reg_2172 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        C_load_54_reg_2177 <= C_q0;
        C_load_55_reg_2182 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        C_load_56_reg_2223 <= C_q0;
        C_load_57_reg_2228 <= C_q1;
        tmp_1_reg_2192 <= tmp_1_fu_884_p2;
        tmp_s_reg_2203[6 : 3] <= tmp_s_fu_895_p3[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_load_6_reg_1937 <= C_q0;
        C_load_7_reg_1942 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        C_load_8_reg_1947 <= C_q0;
        C_load_9_reg_1952 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_1_reg_1912 <= k_1_fu_873_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_859 <= C_q0;
        reg_863 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        tmp_5_0_6_reg_2535 <= tmp_5_0_6_fu_1121_p2;
        tmp_5_0_7_reg_2540 <= tmp_5_0_7_fu_1125_p2;
        tmp_5_1_1_reg_2550 <= tmp_5_1_1_fu_1133_p2;
        tmp_5_1_2_reg_2555 <= tmp_5_1_2_fu_1137_p2;
        tmp_5_1_3_reg_2560 <= tmp_5_1_3_fu_1141_p2;
        tmp_5_1_4_reg_2565 <= tmp_5_1_4_fu_1145_p2;
        tmp_5_1_5_reg_2570 <= tmp_5_1_5_fu_1149_p2;
        tmp_5_1_6_reg_2575 <= tmp_5_1_6_fu_1153_p2;
        tmp_5_1_7_reg_2580 <= tmp_5_1_7_fu_1157_p2;
        tmp_5_1_reg_2545 <= tmp_5_1_fu_1129_p2;
        tmp_5_2_1_reg_2590 <= tmp_5_2_1_fu_1165_p2;
        tmp_5_2_2_reg_2595 <= tmp_5_2_2_fu_1169_p2;
        tmp_5_2_3_reg_2600 <= tmp_5_2_3_fu_1173_p2;
        tmp_5_2_4_reg_2605 <= tmp_5_2_4_fu_1177_p2;
        tmp_5_2_5_reg_2610 <= tmp_5_2_5_fu_1181_p2;
        tmp_5_2_6_reg_2615 <= tmp_5_2_6_fu_1185_p2;
        tmp_5_2_7_reg_2620 <= tmp_5_2_7_fu_1189_p2;
        tmp_5_2_reg_2585 <= tmp_5_2_fu_1161_p2;
        tmp_5_3_1_reg_2630 <= tmp_5_3_1_fu_1197_p2;
        tmp_5_3_2_reg_2635 <= tmp_5_3_2_fu_1201_p2;
        tmp_5_3_3_reg_2640 <= tmp_5_3_3_fu_1205_p2;
        tmp_5_3_4_reg_2645 <= tmp_5_3_4_fu_1209_p2;
        tmp_5_3_5_reg_2650 <= tmp_5_3_5_fu_1213_p2;
        tmp_5_3_6_reg_2655 <= tmp_5_3_6_fu_1217_p2;
        tmp_5_3_7_reg_2660 <= tmp_5_3_7_fu_1221_p2;
        tmp_5_3_reg_2625 <= tmp_5_3_fu_1193_p2;
        tmp_5_4_1_reg_2670 <= tmp_5_4_1_fu_1229_p2;
        tmp_5_4_2_reg_2675 <= tmp_5_4_2_fu_1233_p2;
        tmp_5_4_3_reg_2680 <= tmp_5_4_3_fu_1237_p2;
        tmp_5_4_4_reg_2685 <= tmp_5_4_4_fu_1241_p2;
        tmp_5_4_5_reg_2690 <= tmp_5_4_5_fu_1245_p2;
        tmp_5_4_6_reg_2695 <= tmp_5_4_6_fu_1249_p2;
        tmp_5_4_7_reg_2700 <= tmp_5_4_7_fu_1253_p2;
        tmp_5_4_reg_2665 <= tmp_5_4_fu_1225_p2;
        tmp_5_5_1_reg_2710 <= tmp_5_5_1_fu_1261_p2;
        tmp_5_5_2_reg_2715 <= tmp_5_5_2_fu_1265_p2;
        tmp_5_5_3_reg_2720 <= tmp_5_5_3_fu_1269_p2;
        tmp_5_5_4_reg_2725 <= tmp_5_5_4_fu_1273_p2;
        tmp_5_5_5_reg_2730 <= tmp_5_5_5_fu_1277_p2;
        tmp_5_5_6_reg_2735 <= tmp_5_5_6_fu_1281_p2;
        tmp_5_5_7_reg_2740 <= tmp_5_5_7_fu_1285_p2;
        tmp_5_5_reg_2705 <= tmp_5_5_fu_1257_p2;
        tmp_5_6_1_reg_2750 <= tmp_5_6_1_fu_1293_p2;
        tmp_5_6_2_reg_2755 <= tmp_5_6_2_fu_1297_p2;
        tmp_5_6_3_reg_2760 <= tmp_5_6_3_fu_1301_p2;
        tmp_5_6_4_reg_2765 <= tmp_5_6_4_fu_1305_p2;
        tmp_5_6_5_reg_2770 <= tmp_5_6_5_fu_1309_p2;
        tmp_5_6_6_reg_2775 <= tmp_5_6_6_fu_1313_p2;
        tmp_5_6_7_reg_2780 <= tmp_5_6_7_fu_1317_p2;
        tmp_5_6_reg_2745 <= tmp_5_6_fu_1289_p2;
        tmp_5_7_1_reg_2790 <= tmp_5_7_1_fu_1325_p2;
        tmp_5_7_2_reg_2795 <= tmp_5_7_2_fu_1329_p2;
        tmp_5_7_3_reg_2800 <= tmp_5_7_3_fu_1333_p2;
        tmp_5_7_4_reg_2805 <= tmp_5_7_4_fu_1337_p2;
        tmp_5_7_5_reg_2810 <= tmp_5_7_5_fu_1341_p2;
        tmp_5_7_6_reg_2815 <= tmp_5_7_6_fu_1345_p2;
        tmp_5_7_7_reg_2820 <= tmp_5_7_7_fu_1349_p2;
        tmp_5_7_reg_2785 <= tmp_5_7_fu_1321_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        tmp_6_1_1_reg_2830 <= tmp_6_1_1_fu_1367_p2;
        tmp_6_1_2_reg_2835 <= tmp_6_1_2_fu_1371_p2;
        tmp_6_1_3_reg_2840 <= tmp_6_1_3_fu_1375_p2;
        tmp_6_1_4_reg_2845 <= tmp_6_1_4_fu_1379_p2;
        tmp_6_1_5_reg_2850 <= tmp_6_1_5_fu_1383_p2;
        tmp_6_1_6_reg_2855 <= tmp_6_1_6_fu_1387_p2;
        tmp_6_1_7_reg_2860 <= tmp_6_1_7_fu_1391_p2;
        tmp_6_1_reg_2825 <= tmp_6_1_fu_1363_p2;
        tmp_6_2_1_reg_2870 <= tmp_6_2_1_fu_1399_p2;
        tmp_6_2_2_reg_2875 <= tmp_6_2_2_fu_1403_p2;
        tmp_6_2_3_reg_2880 <= tmp_6_2_3_fu_1407_p2;
        tmp_6_2_4_reg_2885 <= tmp_6_2_4_fu_1411_p2;
        tmp_6_2_5_reg_2890 <= tmp_6_2_5_fu_1415_p2;
        tmp_6_2_6_reg_2895 <= tmp_6_2_6_fu_1419_p2;
        tmp_6_2_7_reg_2900 <= tmp_6_2_7_fu_1423_p2;
        tmp_6_2_reg_2865 <= tmp_6_2_fu_1395_p2;
        tmp_6_3_1_reg_2910 <= tmp_6_3_1_fu_1431_p2;
        tmp_6_3_2_reg_2915 <= tmp_6_3_2_fu_1435_p2;
        tmp_6_3_3_reg_2920 <= tmp_6_3_3_fu_1439_p2;
        tmp_6_3_4_reg_2925 <= tmp_6_3_4_fu_1443_p2;
        tmp_6_3_5_reg_2930 <= tmp_6_3_5_fu_1447_p2;
        tmp_6_3_6_reg_2935 <= tmp_6_3_6_fu_1451_p2;
        tmp_6_3_7_reg_2940 <= tmp_6_3_7_fu_1455_p2;
        tmp_6_3_reg_2905 <= tmp_6_3_fu_1427_p2;
        tmp_6_4_1_reg_2950 <= tmp_6_4_1_fu_1463_p2;
        tmp_6_4_2_reg_2955 <= tmp_6_4_2_fu_1467_p2;
        tmp_6_4_3_reg_2960 <= tmp_6_4_3_fu_1471_p2;
        tmp_6_4_4_reg_2965 <= tmp_6_4_4_fu_1475_p2;
        tmp_6_4_5_reg_2970 <= tmp_6_4_5_fu_1479_p2;
        tmp_6_4_6_reg_2975 <= tmp_6_4_6_fu_1483_p2;
        tmp_6_4_7_reg_2980 <= tmp_6_4_7_fu_1487_p2;
        tmp_6_4_reg_2945 <= tmp_6_4_fu_1459_p2;
        tmp_6_5_1_reg_2990 <= tmp_6_5_1_fu_1495_p2;
        tmp_6_5_2_reg_2995 <= tmp_6_5_2_fu_1499_p2;
        tmp_6_5_3_reg_3000 <= tmp_6_5_3_fu_1503_p2;
        tmp_6_5_4_reg_3005 <= tmp_6_5_4_fu_1507_p2;
        tmp_6_5_5_reg_3010 <= tmp_6_5_5_fu_1511_p2;
        tmp_6_5_6_reg_3015 <= tmp_6_5_6_fu_1515_p2;
        tmp_6_5_7_reg_3020 <= tmp_6_5_7_fu_1519_p2;
        tmp_6_5_reg_2985 <= tmp_6_5_fu_1491_p2;
        tmp_6_6_1_reg_3030 <= tmp_6_6_1_fu_1527_p2;
        tmp_6_6_2_reg_3035 <= tmp_6_6_2_fu_1531_p2;
        tmp_6_6_3_reg_3040 <= tmp_6_6_3_fu_1535_p2;
        tmp_6_6_4_reg_3045 <= tmp_6_6_4_fu_1539_p2;
        tmp_6_6_5_reg_3050 <= tmp_6_6_5_fu_1543_p2;
        tmp_6_6_6_reg_3055 <= tmp_6_6_6_fu_1547_p2;
        tmp_6_6_7_reg_3060 <= tmp_6_6_7_fu_1551_p2;
        tmp_6_6_reg_3025 <= tmp_6_6_fu_1523_p2;
        tmp_6_7_1_reg_3070 <= tmp_6_7_1_fu_1559_p2;
        tmp_6_7_2_reg_3075 <= tmp_6_7_2_fu_1563_p2;
        tmp_6_7_3_reg_3080 <= tmp_6_7_3_fu_1567_p2;
        tmp_6_7_4_reg_3085 <= tmp_6_7_4_fu_1571_p2;
        tmp_6_7_5_reg_3090 <= tmp_6_7_5_fu_1575_p2;
        tmp_6_7_6_reg_3095 <= tmp_6_7_6_fu_1579_p2;
        tmp_6_7_7_reg_3100 <= tmp_6_7_7_fu_1584_p2;
        tmp_6_7_reg_3065 <= tmp_6_7_fu_1555_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        A_address0 = tmp_8_fu_1028_p3;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        A_address0 = tmp_4_fu_972_p3;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        A_address0 = tmp_2_fu_923_p3;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        A_address0 = tmp_fu_879_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        A_address1 = tmp_9_cast_fu_1040_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        A_address1 = tmp_7_cast_fu_987_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        A_address1 = tmp_3_cast_fu_935_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        A_address1 = tmp_1_cast_fu_890_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state34))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state34))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        B_address0 = tmp_20_fu_1050_p3;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        B_address0 = tmp_16_fu_997_p3;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        B_address0 = tmp_12_fu_945_p3;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        B_address0 = tmp_3_fu_903_p1;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        B_address1 = tmp_22_fu_1064_p3;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        B_address1 = tmp_18_fu_1011_p3;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        B_address1 = tmp_14_fu_959_p3;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        B_address1 = tmp_10_fu_914_p3;
    end else begin
        B_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state34))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state34))) begin
        B_ce1 = 1'b1;
    end else begin
        B_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state33))) begin
        C_address0 = 64'd62;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state64))) begin
        C_address0 = 64'd60;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state63))) begin
        C_address0 = 64'd58;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state62))) begin
        C_address0 = 64'd56;
    end else if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state61))) begin
        C_address0 = 64'd54;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state60))) begin
        C_address0 = 64'd52;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state59))) begin
        C_address0 = 64'd50;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state58))) begin
        C_address0 = 64'd48;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state57))) begin
        C_address0 = 64'd46;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state56))) begin
        C_address0 = 64'd44;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state55))) begin
        C_address0 = 64'd42;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state54))) begin
        C_address0 = 64'd40;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state53))) begin
        C_address0 = 64'd38;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state52))) begin
        C_address0 = 64'd36;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state51))) begin
        C_address0 = 64'd34;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state50))) begin
        C_address0 = 64'd32;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state49))) begin
        C_address0 = 64'd30;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state48))) begin
        C_address0 = 64'd28;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state15))) begin
        C_address0 = 64'd26;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state14))) begin
        C_address0 = 64'd24;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state13))) begin
        C_address0 = 64'd22;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state12))) begin
        C_address0 = 64'd20;
    end else if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state11))) begin
        C_address0 = 64'd18;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state10))) begin
        C_address0 = 64'd16;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state9))) begin
        C_address0 = 64'd14;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state8))) begin
        C_address0 = 64'd12;
    end else if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state7))) begin
        C_address0 = 64'd10;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state6))) begin
        C_address0 = 64'd8;
    end else if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state5))) begin
        C_address0 = 64'd6;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state4))) begin
        C_address0 = 64'd4;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state3))) begin
        C_address0 = 64'd2;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state34))) begin
        C_address0 = 64'd0;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state33))) begin
        C_address1 = 64'd63;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state64))) begin
        C_address1 = 64'd61;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state63))) begin
        C_address1 = 64'd59;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state62))) begin
        C_address1 = 64'd57;
    end else if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state61))) begin
        C_address1 = 64'd55;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state60))) begin
        C_address1 = 64'd53;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state59))) begin
        C_address1 = 64'd51;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state58))) begin
        C_address1 = 64'd49;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state57))) begin
        C_address1 = 64'd47;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state56))) begin
        C_address1 = 64'd45;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state55))) begin
        C_address1 = 64'd43;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state54))) begin
        C_address1 = 64'd41;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state53))) begin
        C_address1 = 64'd39;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state52))) begin
        C_address1 = 64'd37;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state51))) begin
        C_address1 = 64'd35;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state50))) begin
        C_address1 = 64'd33;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state49))) begin
        C_address1 = 64'd31;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state48))) begin
        C_address1 = 64'd29;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state15))) begin
        C_address1 = 64'd27;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state14))) begin
        C_address1 = 64'd25;
    end else if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state13))) begin
        C_address1 = 64'd23;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state12))) begin
        C_address1 = 64'd21;
    end else if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state11))) begin
        C_address1 = 64'd19;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state10))) begin
        C_address1 = 64'd17;
    end else if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state9))) begin
        C_address1 = 64'd15;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state8))) begin
        C_address1 = 64'd13;
    end else if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state7))) begin
        C_address1 = 64'd11;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state6))) begin
        C_address1 = 64'd9;
    end else if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state5))) begin
        C_address1 = 64'd7;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state4))) begin
        C_address1 = 64'd5;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state3))) begin
        C_address1 = 64'd3;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state34))) begin
        C_address1 = 64'd1;
    end else begin
        C_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48))) begin
        C_ce1 = 1'b1;
    end else begin
        C_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        C_d0 = tmp_6_7_6_reg_3095;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        C_d0 = tmp_6_7_4_reg_3085;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        C_d0 = tmp_6_7_2_reg_3075;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        C_d0 = tmp_6_7_reg_3065;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        C_d0 = tmp_6_6_6_reg_3055;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        C_d0 = tmp_6_6_4_reg_3045;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        C_d0 = tmp_6_6_2_reg_3035;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        C_d0 = tmp_6_6_reg_3025;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        C_d0 = tmp_6_5_6_reg_3015;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        C_d0 = tmp_6_5_4_reg_3005;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        C_d0 = tmp_6_5_2_reg_2995;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        C_d0 = tmp_6_5_reg_2985;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        C_d0 = tmp_6_4_6_reg_2975;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        C_d0 = tmp_6_4_4_reg_2965;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        C_d0 = tmp_6_4_2_reg_2955;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        C_d0 = tmp_6_4_reg_2945;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        C_d0 = tmp_6_3_6_reg_2935;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        C_d0 = tmp_6_3_4_reg_2925;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        C_d0 = tmp_6_3_2_reg_2915;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        C_d0 = tmp_6_3_reg_2905;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        C_d0 = tmp_6_2_6_reg_2895;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        C_d0 = tmp_6_2_4_reg_2885;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        C_d0 = tmp_6_2_2_reg_2875;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        C_d0 = tmp_6_2_reg_2865;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        C_d0 = tmp_6_1_6_reg_2855;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        C_d0 = tmp_6_1_4_reg_2845;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        C_d0 = tmp_6_1_2_reg_2835;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        C_d0 = tmp_6_1_reg_2825;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        C_d0 = tmp_6_0_6_fu_1353_p2;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        C_d0 = tmp_6_0_4_fu_1111_p2;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        C_d0 = tmp_6_0_2_fu_1093_p2;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        C_d0 = tmp_6_fu_1073_p2;
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        C_d1 = tmp_6_7_7_reg_3100;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        C_d1 = tmp_6_7_5_reg_3090;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        C_d1 = tmp_6_7_3_reg_3080;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        C_d1 = tmp_6_7_1_reg_3070;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        C_d1 = tmp_6_6_7_reg_3060;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        C_d1 = tmp_6_6_5_reg_3050;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        C_d1 = tmp_6_6_3_reg_3040;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        C_d1 = tmp_6_6_1_reg_3030;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        C_d1 = tmp_6_5_7_reg_3020;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        C_d1 = tmp_6_5_5_reg_3010;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        C_d1 = tmp_6_5_3_reg_3000;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        C_d1 = tmp_6_5_1_reg_2990;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        C_d1 = tmp_6_4_7_reg_2980;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        C_d1 = tmp_6_4_5_reg_2970;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        C_d1 = tmp_6_4_3_reg_2960;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        C_d1 = tmp_6_4_1_reg_2950;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        C_d1 = tmp_6_3_7_reg_2940;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        C_d1 = tmp_6_3_5_reg_2930;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        C_d1 = tmp_6_3_3_reg_2920;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        C_d1 = tmp_6_3_1_reg_2910;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        C_d1 = tmp_6_2_7_reg_2900;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        C_d1 = tmp_6_2_5_reg_2890;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        C_d1 = tmp_6_2_3_reg_2880;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        C_d1 = tmp_6_2_1_reg_2870;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        C_d1 = tmp_6_1_7_reg_2860;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        C_d1 = tmp_6_1_5_reg_2850;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        C_d1 = tmp_6_1_3_reg_2840;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        C_d1 = tmp_6_1_1_reg_2830;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        C_d1 = tmp_6_0_7_fu_1358_p2;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        C_d1 = tmp_6_0_5_fu_1116_p2;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        C_d1 = tmp_6_0_3_fu_1098_p2;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        C_d1 = tmp_6_0_1_fu_1079_p2;
    end else begin
        C_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48))) begin
        C_we1 = 1'b1;
    end else begin
        C_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_867_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_867_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_867_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond2_fu_867_p2 = ((k_reg_847 == 4'd8) ? 1'b1 : 1'b0);

assign k_1_fu_873_p2 = (k_reg_847 + 4'd1);

assign tmp_10_fu_914_p3 = {{57'd0}, {tmp_9_fu_908_p2}};

assign tmp_11_fu_940_p2 = (tmp_s_reg_2203 | 7'd2);

assign tmp_12_fu_945_p3 = {{57'd0}, {tmp_11_fu_940_p2}};

assign tmp_13_fu_954_p2 = (tmp_s_reg_2203 | 7'd3);

assign tmp_14_fu_959_p3 = {{57'd0}, {tmp_13_fu_954_p2}};

assign tmp_15_fu_992_p2 = (tmp_s_reg_2203 | 7'd4);

assign tmp_16_fu_997_p3 = {{57'd0}, {tmp_15_fu_992_p2}};

assign tmp_17_fu_1006_p2 = (tmp_s_reg_2203 | 7'd5);

assign tmp_18_fu_1011_p3 = {{57'd0}, {tmp_17_fu_1006_p2}};

assign tmp_19_fu_1045_p2 = (tmp_s_reg_2203 | 7'd6);

assign tmp_1_cast_fu_890_p1 = $unsigned(tmp_1_fu_884_p2);

assign tmp_1_fu_884_p2 = (k_reg_847 ^ 4'd8);

assign tmp_20_fu_1050_p3 = {{57'd0}, {tmp_19_fu_1045_p2}};

assign tmp_21_fu_1059_p2 = (tmp_s_reg_2203 | 7'd7);

assign tmp_22_fu_1064_p3 = {{57'd0}, {tmp_21_fu_1059_p2}};

assign tmp_2_fu_923_p3 = {{60'd1}, {k_reg_847}};

assign tmp_3_cast4_fu_932_p1 = tmp_1_reg_2192;

assign tmp_3_cast_fu_935_p1 = $unsigned(tmp_3_cast4_fu_932_p1);

assign tmp_3_fu_903_p1 = tmp_s_fu_895_p3;

assign tmp_4_fu_972_p3 = {{60'd2}, {k_reg_847}};

assign tmp_5_0_1_fu_1024_p2 = ($signed(A_load_reg_2253) * $signed(B_load_1_reg_2277));

assign tmp_5_0_2_fu_1085_p2 = ($signed(A_load_reg_2253) * $signed(B_load_2_reg_2341));

assign tmp_5_0_3_fu_1089_p2 = ($signed(A_load_reg_2253) * $signed(B_load_3_reg_2353));

assign tmp_5_0_4_fu_1103_p2 = ($signed(A_load_reg_2253) * $signed(B_load_4_reg_2429));

assign tmp_5_0_5_fu_1107_p2 = ($signed(A_load_reg_2253) * $signed(B_load_5_reg_2441));

assign tmp_5_0_6_fu_1121_p2 = ($signed(A_load_reg_2253) * $signed(B_load_6_reg_2487));

assign tmp_5_0_7_fu_1125_p2 = ($signed(A_load_reg_2253) * $signed(B_load_7_reg_2499));

assign tmp_5_1_1_fu_1133_p2 = ($signed(A_load_1_reg_2289) * $signed(B_load_1_reg_2277));

assign tmp_5_1_2_fu_1137_p2 = ($signed(A_load_1_reg_2289) * $signed(B_load_2_reg_2341));

assign tmp_5_1_3_fu_1141_p2 = ($signed(A_load_1_reg_2289) * $signed(B_load_3_reg_2353));

assign tmp_5_1_4_fu_1145_p2 = ($signed(A_load_1_reg_2289) * $signed(B_load_4_reg_2429));

assign tmp_5_1_5_fu_1149_p2 = ($signed(A_load_1_reg_2289) * $signed(B_load_5_reg_2441));

assign tmp_5_1_6_fu_1153_p2 = ($signed(A_load_1_reg_2289) * $signed(B_load_6_reg_2487));

assign tmp_5_1_7_fu_1157_p2 = ($signed(A_load_1_reg_2289) * $signed(B_load_7_reg_2499));

assign tmp_5_1_fu_1129_p2 = ($signed(A_load_1_reg_2289) * $signed(B_load_reg_2265));

assign tmp_5_2_1_fu_1165_p2 = ($signed(A_load_2_reg_2365) * $signed(B_load_1_reg_2277));

assign tmp_5_2_2_fu_1169_p2 = ($signed(A_load_2_reg_2365) * $signed(B_load_2_reg_2341));

assign tmp_5_2_3_fu_1173_p2 = ($signed(A_load_2_reg_2365) * $signed(B_load_3_reg_2353));

assign tmp_5_2_4_fu_1177_p2 = ($signed(A_load_2_reg_2365) * $signed(B_load_4_reg_2429));

assign tmp_5_2_5_fu_1181_p2 = ($signed(A_load_2_reg_2365) * $signed(B_load_5_reg_2441));

assign tmp_5_2_6_fu_1185_p2 = ($signed(A_load_2_reg_2365) * $signed(B_load_6_reg_2487));

assign tmp_5_2_7_fu_1189_p2 = ($signed(A_load_2_reg_2365) * $signed(B_load_7_reg_2499));

assign tmp_5_2_fu_1161_p2 = ($signed(A_load_2_reg_2365) * $signed(B_load_reg_2265));

assign tmp_5_3_1_fu_1197_p2 = ($signed(A_load_3_reg_2377) * $signed(B_load_1_reg_2277));

assign tmp_5_3_2_fu_1201_p2 = ($signed(A_load_3_reg_2377) * $signed(B_load_2_reg_2341));

assign tmp_5_3_3_fu_1205_p2 = ($signed(A_load_3_reg_2377) * $signed(B_load_3_reg_2353));

assign tmp_5_3_4_fu_1209_p2 = ($signed(A_load_3_reg_2377) * $signed(B_load_4_reg_2429));

assign tmp_5_3_5_fu_1213_p2 = ($signed(A_load_3_reg_2377) * $signed(B_load_5_reg_2441));

assign tmp_5_3_6_fu_1217_p2 = ($signed(A_load_3_reg_2377) * $signed(B_load_6_reg_2487));

assign tmp_5_3_7_fu_1221_p2 = ($signed(A_load_3_reg_2377) * $signed(B_load_7_reg_2499));

assign tmp_5_3_fu_1193_p2 = ($signed(A_load_3_reg_2377) * $signed(B_load_reg_2265));

assign tmp_5_4_1_fu_1229_p2 = ($signed(A_load_4_reg_2453) * $signed(B_load_1_reg_2277));

assign tmp_5_4_2_fu_1233_p2 = ($signed(A_load_4_reg_2453) * $signed(B_load_2_reg_2341));

assign tmp_5_4_3_fu_1237_p2 = ($signed(A_load_4_reg_2453) * $signed(B_load_3_reg_2353));

assign tmp_5_4_4_fu_1241_p2 = ($signed(A_load_4_reg_2453) * $signed(B_load_4_reg_2429));

assign tmp_5_4_5_fu_1245_p2 = ($signed(A_load_4_reg_2453) * $signed(B_load_5_reg_2441));

assign tmp_5_4_6_fu_1249_p2 = ($signed(A_load_4_reg_2453) * $signed(B_load_6_reg_2487));

assign tmp_5_4_7_fu_1253_p2 = ($signed(A_load_4_reg_2453) * $signed(B_load_7_reg_2499));

assign tmp_5_4_fu_1225_p2 = ($signed(A_load_4_reg_2453) * $signed(B_load_reg_2265));

assign tmp_5_5_1_fu_1261_p2 = ($signed(A_load_5_reg_2465) * $signed(B_load_1_reg_2277));

assign tmp_5_5_2_fu_1265_p2 = ($signed(A_load_5_reg_2465) * $signed(B_load_2_reg_2341));

assign tmp_5_5_3_fu_1269_p2 = ($signed(A_load_5_reg_2465) * $signed(B_load_3_reg_2353));

assign tmp_5_5_4_fu_1273_p2 = ($signed(A_load_5_reg_2465) * $signed(B_load_4_reg_2429));

assign tmp_5_5_5_fu_1277_p2 = ($signed(A_load_5_reg_2465) * $signed(B_load_5_reg_2441));

assign tmp_5_5_6_fu_1281_p2 = ($signed(A_load_5_reg_2465) * $signed(B_load_6_reg_2487));

assign tmp_5_5_7_fu_1285_p2 = ($signed(A_load_5_reg_2465) * $signed(B_load_7_reg_2499));

assign tmp_5_5_fu_1257_p2 = ($signed(A_load_5_reg_2465) * $signed(B_load_reg_2265));

assign tmp_5_6_1_fu_1293_p2 = ($signed(A_load_6_reg_2511) * $signed(B_load_1_reg_2277));

assign tmp_5_6_2_fu_1297_p2 = ($signed(A_load_6_reg_2511) * $signed(B_load_2_reg_2341));

assign tmp_5_6_3_fu_1301_p2 = ($signed(A_load_6_reg_2511) * $signed(B_load_3_reg_2353));

assign tmp_5_6_4_fu_1305_p2 = ($signed(A_load_6_reg_2511) * $signed(B_load_4_reg_2429));

assign tmp_5_6_5_fu_1309_p2 = ($signed(A_load_6_reg_2511) * $signed(B_load_5_reg_2441));

assign tmp_5_6_6_fu_1313_p2 = ($signed(A_load_6_reg_2511) * $signed(B_load_6_reg_2487));

assign tmp_5_6_7_fu_1317_p2 = ($signed(A_load_6_reg_2511) * $signed(B_load_7_reg_2499));

assign tmp_5_6_fu_1289_p2 = ($signed(A_load_6_reg_2511) * $signed(B_load_reg_2265));

assign tmp_5_7_1_fu_1325_p2 = ($signed(A_load_7_reg_2523) * $signed(B_load_1_reg_2277));

assign tmp_5_7_2_fu_1329_p2 = ($signed(A_load_7_reg_2523) * $signed(B_load_2_reg_2341));

assign tmp_5_7_3_fu_1333_p2 = ($signed(A_load_7_reg_2523) * $signed(B_load_3_reg_2353));

assign tmp_5_7_4_fu_1337_p2 = ($signed(A_load_7_reg_2523) * $signed(B_load_4_reg_2429));

assign tmp_5_7_5_fu_1341_p2 = ($signed(A_load_7_reg_2523) * $signed(B_load_5_reg_2441));

assign tmp_5_7_6_fu_1345_p2 = ($signed(A_load_7_reg_2523) * $signed(B_load_6_reg_2487));

assign tmp_5_7_7_fu_1349_p2 = ($signed(A_load_7_reg_2523) * $signed(B_load_7_reg_2499));

assign tmp_5_7_fu_1321_p2 = ($signed(A_load_7_reg_2523) * $signed(B_load_reg_2265));

assign tmp_5_fu_1020_p2 = ($signed(A_load_reg_2253) * $signed(B_load_reg_2265));

assign tmp_6_0_1_fu_1079_p2 = (reg_863 + tmp_5_0_1_reg_2336);

assign tmp_6_0_2_fu_1093_p2 = (C_load_2_reg_1917 + tmp_5_0_2_reg_2419);

assign tmp_6_0_3_fu_1098_p2 = (C_load_3_reg_1922 + tmp_5_0_3_reg_2424);

assign tmp_6_0_4_fu_1111_p2 = (C_load_4_reg_1927 + tmp_5_0_4_reg_2477);

assign tmp_6_0_5_fu_1116_p2 = (C_load_5_reg_1932 + tmp_5_0_5_reg_2482);

assign tmp_6_0_6_fu_1353_p2 = (C_load_6_reg_1937 + tmp_5_0_6_reg_2535);

assign tmp_6_0_7_fu_1358_p2 = (C_load_7_reg_1942 + tmp_5_0_7_reg_2540);

assign tmp_6_1_1_fu_1367_p2 = (C_load_9_reg_1952 + tmp_5_1_1_reg_2550);

assign tmp_6_1_2_fu_1371_p2 = (C_load_10_reg_1957 + tmp_5_1_2_reg_2555);

assign tmp_6_1_3_fu_1375_p2 = (C_load_11_reg_1962 + tmp_5_1_3_reg_2560);

assign tmp_6_1_4_fu_1379_p2 = (C_load_12_reg_1967 + tmp_5_1_4_reg_2565);

assign tmp_6_1_5_fu_1383_p2 = (C_load_13_reg_1972 + tmp_5_1_5_reg_2570);

assign tmp_6_1_6_fu_1387_p2 = (C_load_14_reg_1977 + tmp_5_1_6_reg_2575);

assign tmp_6_1_7_fu_1391_p2 = (C_load_15_reg_1982 + tmp_5_1_7_reg_2580);

assign tmp_6_1_fu_1363_p2 = (C_load_8_reg_1947 + tmp_5_1_reg_2545);

assign tmp_6_2_1_fu_1399_p2 = (C_load_17_reg_1992 + tmp_5_2_1_reg_2590);

assign tmp_6_2_2_fu_1403_p2 = (C_load_18_reg_1997 + tmp_5_2_2_reg_2595);

assign tmp_6_2_3_fu_1407_p2 = (C_load_19_reg_2002 + tmp_5_2_3_reg_2600);

assign tmp_6_2_4_fu_1411_p2 = (C_load_20_reg_2007 + tmp_5_2_4_reg_2605);

assign tmp_6_2_5_fu_1415_p2 = (C_load_21_reg_2012 + tmp_5_2_5_reg_2610);

assign tmp_6_2_6_fu_1419_p2 = (C_load_22_reg_2017 + tmp_5_2_6_reg_2615);

assign tmp_6_2_7_fu_1423_p2 = (C_load_23_reg_2022 + tmp_5_2_7_reg_2620);

assign tmp_6_2_fu_1395_p2 = (C_load_16_reg_1987 + tmp_5_2_reg_2585);

assign tmp_6_3_1_fu_1431_p2 = (C_load_25_reg_2032 + tmp_5_3_1_reg_2630);

assign tmp_6_3_2_fu_1435_p2 = (C_load_26_reg_2037 + tmp_5_3_2_reg_2635);

assign tmp_6_3_3_fu_1439_p2 = (C_load_27_reg_2042 + tmp_5_3_3_reg_2640);

assign tmp_6_3_4_fu_1443_p2 = (C_load_28_reg_2047 + tmp_5_3_4_reg_2645);

assign tmp_6_3_5_fu_1447_p2 = (C_load_29_reg_2052 + tmp_5_3_5_reg_2650);

assign tmp_6_3_6_fu_1451_p2 = (C_load_30_reg_2057 + tmp_5_3_6_reg_2655);

assign tmp_6_3_7_fu_1455_p2 = (C_load_31_reg_2062 + tmp_5_3_7_reg_2660);

assign tmp_6_3_fu_1427_p2 = (C_load_24_reg_2027 + tmp_5_3_reg_2625);

assign tmp_6_4_1_fu_1463_p2 = (C_load_33_reg_2072 + tmp_5_4_1_reg_2670);

assign tmp_6_4_2_fu_1467_p2 = (C_load_34_reg_2077 + tmp_5_4_2_reg_2675);

assign tmp_6_4_3_fu_1471_p2 = (C_load_35_reg_2082 + tmp_5_4_3_reg_2680);

assign tmp_6_4_4_fu_1475_p2 = (C_load_36_reg_2087 + tmp_5_4_4_reg_2685);

assign tmp_6_4_5_fu_1479_p2 = (C_load_37_reg_2092 + tmp_5_4_5_reg_2690);

assign tmp_6_4_6_fu_1483_p2 = (C_load_38_reg_2097 + tmp_5_4_6_reg_2695);

assign tmp_6_4_7_fu_1487_p2 = (C_load_39_reg_2102 + tmp_5_4_7_reg_2700);

assign tmp_6_4_fu_1459_p2 = (C_load_32_reg_2067 + tmp_5_4_reg_2665);

assign tmp_6_5_1_fu_1495_p2 = (C_load_41_reg_2112 + tmp_5_5_1_reg_2710);

assign tmp_6_5_2_fu_1499_p2 = (C_load_42_reg_2117 + tmp_5_5_2_reg_2715);

assign tmp_6_5_3_fu_1503_p2 = (C_load_43_reg_2122 + tmp_5_5_3_reg_2720);

assign tmp_6_5_4_fu_1507_p2 = (C_load_44_reg_2127 + tmp_5_5_4_reg_2725);

assign tmp_6_5_5_fu_1511_p2 = (C_load_45_reg_2132 + tmp_5_5_5_reg_2730);

assign tmp_6_5_6_fu_1515_p2 = (C_load_46_reg_2137 + tmp_5_5_6_reg_2735);

assign tmp_6_5_7_fu_1519_p2 = (C_load_47_reg_2142 + tmp_5_5_7_reg_2740);

assign tmp_6_5_fu_1491_p2 = (C_load_40_reg_2107 + tmp_5_5_reg_2705);

assign tmp_6_6_1_fu_1527_p2 = (C_load_49_reg_2152 + tmp_5_6_1_reg_2750);

assign tmp_6_6_2_fu_1531_p2 = (C_load_50_reg_2157 + tmp_5_6_2_reg_2755);

assign tmp_6_6_3_fu_1535_p2 = (C_load_51_reg_2162 + tmp_5_6_3_reg_2760);

assign tmp_6_6_4_fu_1539_p2 = (C_load_52_reg_2167 + tmp_5_6_4_reg_2765);

assign tmp_6_6_5_fu_1543_p2 = (C_load_53_reg_2172 + tmp_5_6_5_reg_2770);

assign tmp_6_6_6_fu_1547_p2 = (C_load_54_reg_2177 + tmp_5_6_6_reg_2775);

assign tmp_6_6_7_fu_1551_p2 = (C_load_55_reg_2182 + tmp_5_6_7_reg_2780);

assign tmp_6_6_fu_1523_p2 = (C_load_48_reg_2147 + tmp_5_6_reg_2745);

assign tmp_6_7_1_fu_1559_p2 = (C_load_57_reg_2228 + tmp_5_7_1_reg_2790);

assign tmp_6_7_2_fu_1563_p2 = (C_load_58_reg_2301 + tmp_5_7_2_reg_2795);

assign tmp_6_7_3_fu_1567_p2 = (C_load_59_reg_2306 + tmp_5_7_3_reg_2800);

assign tmp_6_7_4_fu_1571_p2 = (C_load_60_reg_2389 + tmp_5_7_4_reg_2805);

assign tmp_6_7_5_fu_1575_p2 = (C_load_61_reg_2394 + tmp_5_7_5_reg_2810);

assign tmp_6_7_6_fu_1579_p2 = (reg_859 + tmp_5_7_6_reg_2815);

assign tmp_6_7_7_fu_1584_p2 = (reg_863 + tmp_5_7_7_reg_2820);

assign tmp_6_7_fu_1555_p2 = (C_load_56_reg_2223 + tmp_5_7_reg_2785);

assign tmp_6_fu_1073_p2 = (reg_859 + tmp_5_reg_2331);

assign tmp_7_cast_fu_987_p1 = tmp_7_fu_981_p2;

assign tmp_7_fu_981_p2 = ($signed(tmp_cast2_fu_968_p1) + $signed(6'd40));

assign tmp_8_fu_1028_p3 = {{60'd3}, {k_reg_847}};

assign tmp_9_cast3_fu_1037_p1 = tmp_1_reg_2192;

assign tmp_9_cast_fu_1040_p1 = $unsigned(tmp_9_cast3_fu_1037_p1);

assign tmp_9_fu_908_p2 = (tmp_s_fu_895_p3 | 7'd1);

assign tmp_cast2_fu_968_p1 = k_reg_847;

assign tmp_fu_879_p1 = k_reg_847;

assign tmp_s_fu_895_p3 = {{k_reg_847}, {3'd0}};

always @ (posedge ap_clk) begin
    tmp_s_reg_2203[2:0] <= 3'b000;
end

endmodule //mul1
